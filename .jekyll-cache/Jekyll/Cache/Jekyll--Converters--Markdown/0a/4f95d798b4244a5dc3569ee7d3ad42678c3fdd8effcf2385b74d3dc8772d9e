I"fO<h1 id="review">Review)</h1>

<p><strong>assembly instruction</strong></p>

<p><img src="https://user-images.githubusercontent.com/79521972/159843857-8a39415e-5445-4956-9453-403f56029513.png" alt="image" /></p>

<p><br /></p>

<p><strong>Machine instruction</strong></p>

<p><img src="https://user-images.githubusercontent.com/79521972/159824475-918f28c9-0278-4d6c-a16c-db34ccf6f99f.png" alt="image" /></p>

<p>lw, sw, beq, bne는 I type을 써도 무방하다. 공간 할애하는 것이 유사하기 때문에</p>

<p><br /></p>

<p><strong>R-Type</strong></p>

<ul>
  <li>
    <p>opcode: 어떤 명령어 인지를 표현하는 bit</p>
  </li>
  <li>남는 bit 공간 중 5bit는 shamt 명령어를 사용하기 위해 사용되는 공간이다.</li>
  <li>그래서 또 최종적으로 남는 6bit는 funct. code로 지정하여 R-type인 경우에 opcode와 더불어 사용되는 공간이다.</li>
</ul>

<p><br /></p>

<p><strong>Decode</strong></p>

<ul>
  <li>opcode를 본다.</li>
  <li>R -type의 opcode는 000000으로 설정되어있다.
    <ul>
      <li>그래서 구체적인 R-type의 명령어를 알고싶으면 function code를 봐서 연산 종류를 알 수 있게 되는 것이다.(add, sub, xor, and,…)</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<hr />

<h3 id="i-type">I-Type</h3>

<ul>
  <li>
    <p>Immediate type</p>
  </li>
  <li>3 operands:
    <ul>
      <li>rs, rt: register operands</li>
      <li>imm: 16-bit two’s complement immediate</li>
    </ul>
  </li>
  <li>Other fields:
    <ul>
      <li>op: the opcode</li>
      <li>Simplicity favors regularity: all instructions have opcode</li>
      <li>Operation is completely determined by opcode(6 bit)</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/159845601-d31eb4ef-d48c-4b79-ab1e-ea4b3c78119b.png" alt="image" /></p>

<p><br /></p>

<h3 id="i-type-examples">I-Type Examples</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/159845634-9038ed8a-84ff-4b8b-98b5-9292435a9346.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/79521972/159845667-ee1015ed-fba4-4ddc-afe5-cfc9608e43ac.png" alt="image" /></p>

<p>code와 field value의 register 위치가 다름에 유의(destination의 위치가 code에서는 맨 처음이다.)</p>

<p><br /></p>

<h3 id="j-type">J-Type</h3>

<ul>
  <li>Jump-type</li>
  <li>26-bit address operand(addr)</li>
  <li>Used for jump instructions(j)</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/159845745-fe37029c-69ed-403c-867e-bb6dd0a7d224.png" alt="image" /></p>

<p><br /></p>

<h3 id="review-instruction-formats">Review: Instruction Formats</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/159845788-7dd1148b-5a8f-4c38-b193-b2dd2d9058c0.png" alt="image" /></p>

<p><br /></p>

<h3 id="power-of-the-stored-program">Power of the Stored Program</h3>

<ul>
  <li>32-bit instructions &amp; data stored in memory</li>
  <li>Sequence of instructions: only difference between two applications</li>
  <li>To run a new program:
    <ul>
      <li>No rewiring required</li>
      <li>Simply store new program in memory</li>
    </ul>
  </li>
  <li>Program Execution:
    <ul>
      <li>Processor <strong>fetches</strong> (reads) instructions from memory in sequence</li>
      <li>Processor <strong>performs</strong> the specified operation</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="the-stored-program">The Stored Program</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/159845977-d050a693-4fa4-49bc-9f29-dd20012c665d.png" alt="image" /></p>

<p><br /></p>

<h3 id="interpreting-machine-code">Interpreting Machine Code</h3>

<ul>
  <li>Start with opcode: tells how to parse rest</li>
  <li>If opcode all 0’s
    <ul>
      <li><mark>R-Type instruction</mark></li>
      <li>Function bits tell operation</li>
    </ul>
  </li>
  <li>Otherwise
    <ul>
      <li>opcode tells operation (see the table appendix B.1 ~ B.3)</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/159846065-a4e98595-4ea7-4721-a9f4-7d2b53ea36c0.png" alt="image" /></p>

<p><br /></p>

<h3 id="mips-opcodes">MIPS opcodes</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/159846219-334e5d68-1683-4e87-962d-d352a525f737.png" alt="image" /><img src="https://user-images.githubusercontent.com/79521972/159846230-042da64b-3ed1-4790-a1ef-a7b1485bda79.png" alt="image" /></p>

<p><br /></p>

<h3 id="programming">Programming</h3>

<ul>
  <li>High-level languages:
    <ul>
      <li>ex) C, Java, Python</li>
      <li>Written at higher level of abstraction</li>
    </ul>
  </li>
  <li>Common high-level software constructs:
    <ul>
      <li>if/else statements</li>
      <li>for loops</li>
      <li>while loops</li>
      <li>arrays</li>
      <li>function calls</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="logical-instructions">Logical Instructions</h3>

<ul>
  <li><strong>and, or, xor, nor</strong>
    <ul>
      <li>and: useful for <strong>masking</strong> bits
        <ul>
          <li>Masking all but the least significant byte of a value:
            <ul>
              <li>0xF234012F AND 0x000000FF = 0x0000002F</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>or: useful for <strong>combining</strong> bit fields
        <ul>
          <li>Combine 0xF2340000 with 0x000012BC:
            <ul>
              <li>0xF2340000 OR 0x000012BC = 0xF23412BC</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>nor: useful for <strong>inverting</strong> bits:
        <ul>
          <li>A NOR $0 = NOT A</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>andi, ori, xori</strong>
    <ul>
      <li>16-bit immediate is zero-extended (not sign-extended)</li>
      <li>nori not needed</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p>각 example 참고</p>

<p><br /></p>

<h3 id="shift-instructions">Shift Instructions</h3>

<p>5가 들어가는 위치는 shamt이기 때문에 register가 들어가는 자리가 하나가 남는데 그 자리는 그냥 쓰지 않는 자리이다.</p>

<ul>
  <li>sll: shift left logical
    <ul>
      <li>Example: <code class="language-plaintext highlighter-rouge">sll $t0, $t1, 5 # $t0 &lt;= $t1 &lt;&lt; 5</code></li>
    </ul>
  </li>
  <li>srl: shift right logical
    <ul>
      <li>Example: <code class="language-plaintext highlighter-rouge">srl $t0, $t1, 5 # $t0 &lt;= $t1 &gt;&gt; 5</code></li>
    </ul>
  </li>
  <li>sra: shift right arithmetic
    <ul>
      <li>Example: <code class="language-plaintext highlighter-rouge">sra $t0, $t1, 5 # $t0 &lt;= $t1 &gt;&gt;&gt; 5</code></li>
    </ul>
  </li>
</ul>

<p>shift right 할 때는 sign extension으로 앞 부분의 새로 만들어지는 bit를 채운다.</p>

<p><br /></p>

<h3 id="variable-shift-instructions">Variable Shift Instructions</h3>

<ul>
  <li>sllv: shift left logical variable
    <ul>
      <li>Example: <code class="language-plaintext highlighter-rouge">sllv $t0, $t1, $t2 # $t0 &lt;= $t1 &lt;&lt; $t2</code></li>
    </ul>
  </li>
  <li>srlv: shift right logical variable
    <ul>
      <li>Example: srlv $t0, $t1, $t2    # $t0 &lt;= $t1 » $t2</li>
    </ul>
  </li>
  <li>srav: shift right arithmetic variable
    <ul>
      <li>Example: srav $t0, $t1, $t2  # $t0 &lt;= $t1 »&gt; $t2</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="shift-instructions-1">Shift Instructions</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/159847674-e550b219-f365-43e1-98df-9088d867e4de.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/79521972/159847722-e6b29826-e73d-459b-b461-44cdf0debd67.png" alt="image" /></p>

<p><br /></p>

<h3 id="generating-constants">Generating Constants</h3>

<ul>
  <li>
    <p>16-bit constant using addi:</p>

    <ul>
      <li>
        <p>C Code</p>

        <ul>
          <li>
            <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// int is a 32-bit signed word </span>
<span class="kt">int</span> <span class="n">a</span> <span class="o">-</span> <span class="mh">0x4f3c</span><span class="p">;</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>
        <p>MIPS assembly code</p>

        <ul>
          <li>
            <pre><code class="language-assembly"># $s0 = a
addi $s0, $0, 0x4f3c
</code></pre>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>32-bit constants using load upper immediate(lui) and ori:</p>

    <ul>
      <li>
        <p>32 bit인 경우 16bit의 제약 조건에서 사용할 수 없기 때문에 두 개로 나눠서 사용한다.</p>

        <ul>
          <li>lui / ori</li>
        </ul>
      </li>
      <li>
        <p>C Code</p>

        <ul>
          <li>
            <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0xFEDC8765</span><span class="p">;</span> <span class="c1">//32bit</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
      <li>
        <p>MIPS assembly code</p>

        <ul>
          <li>
            <pre><code class="language-assembly"># $s0 = a
lui $s0, 0xFEDC
ori $s0, $s0, 0x8765
</code></pre>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="multiplication-division">Multiplication, Division</h3>

<ul>
  <li>Special register: lo, hi</li>
  <li>32 x 32 multiplication, 64 bit result
    <ul>
      <li><code class="language-plaintext highlighter-rouge">mult $s0, $s1</code></li>
      <li>Result in <code class="language-plaintext highlighter-rouge">{hi,lo}</code></li>
    </ul>
  </li>
  <li>32-bit division, 32-bit quotient, remainder
    <ul>
      <li><code class="language-plaintext highlighter-rouge">div $s0, $s1</code></li>
      <li>Quotient(몫) in <code class="language-plaintext highlighter-rouge">lo</code></li>
      <li>Remainder(나머지) in <code class="language-plaintext highlighter-rouge">hi</code></li>
    </ul>
  </li>
  <li><strong>M</strong>oves <strong>f</strong>rom <strong>lo/hi</strong> special registers
    <ul>
      <li><code class="language-plaintext highlighter-rouge">mflo $s2</code>
        <ul>
          <li>$s2 &lt;- $lo : lo(몫, 32bit)으로부터 데이터를 가져와 $2에 저장한다.</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">mfhi $s3</code></li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="branching">Branching</h3>

<ul>
  <li>
    <p>Execute instructions out of sequence(점프)</p>
  </li>
  <li>
    <p>Types of branches:</p>

    <ul>
      <li><strong>Conditional</strong>
        <ul>
          <li>branch if equal (beq)</li>
          <li>branch if not equal (bne)</li>
        </ul>
      </li>
      <li><strong>Unconditional</strong></li>
    </ul>
  </li>
  <li>Jump (j)
    <ul>
      <li>jump register (jr) : register로 jump해라</li>
    </ul>
  </li>
  <li>jump and link (jal)</li>
</ul>

<p><br /></p>

<h3 id="review-the-stored-program">Review: The Stored Program</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/159848676-bc959799-1288-4f24-9c5e-1629d0a7c959.png" alt="image" /></p>

<p>PC부터 시작</p>

<p><br /></p>

<h3 id="conditional-branching-beq">Conditional Branching (beq)</h3>

<p><strong># MIPS assembly</strong></p>

<p><img src="https://user-images.githubusercontent.com/79521972/159848789-8fd71fbe-e9f3-4583-8c72-ca8d6d4ae164.png" alt="image" /></p>

<blockquote>
  <p>Labels indicate instruction location. They can’t be reserved words and must be followed by colon (:)</p>
</blockquote>

<p>sll는 x2의 효과가 있기 때문에 2만큼 shift left를 하면 x2<sup>2</sup> 이기 때문에 $s1에는 4가 저장된다.</p>

<p><br /></p>

<h3 id="the-branch-not-taken-bne">The Branch Not Taken (bne)</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/159924349-0201c5de-d535-4876-b725-15fe22546514.png" alt="image" /></p>

<h3 id="unconditional-branchingj">Unconditional Branching(j)</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/159924405-1cefcf8b-f22c-437a-8876-f2a694de37b6.png" alt="image" /></p>

<h3 id="unconditional-branchingjr">Unconditional Branching(jr)</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/159924430-c37afc03-366e-4d27-a74c-ef91be47e412.png" alt="image" /></p>

<blockquote>
  <p>jr is an R-type instruction</p>
</blockquote>

<p><br /></p>

<h3 id="high-level-code-constructs">High-level Code Constructs</h3>

<ul>
  <li>if statements</li>
  <li>if/else statements</li>
  <li>while loops</li>
  <li>for loops</li>
</ul>

<p><br /></p>

<h4 id="if-statement">If Statement</h4>

<ul>
  <li>C Code</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">g</span> <span class="o">+</span> <span class="n">h</span><span class="p">;</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">f</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>MIPS assembly code</li>
</ul>

<pre><code class="language-assembly"># $s0 = f, $s1 = g, $s2 = h
# $s3 = i, $s4 = j
	bne $s3, $s4, L1
	add $s0, $s1, $s2
	
L1 sub $s0, $s0, $s3
</code></pre>

<blockquote>
  <p>Assembly tests opposite case (i != j) of high-level code(i == j)</p>
</blockquote>

<p>high level 언어에서는 ==이면 안의 구문을 실행하는 것이니까 assembly 언어에서는 !=이면 그 다음을 생략 하고 L1으로 점프하게 한 것이다.</p>

<p><br /></p>

<h4 id="ifelse-statement">If/Else Statement</h4>

<ul>
  <li>C Code</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">g</span> <span class="o">+</span> <span class="n">h</span><span class="p">;</span>
<span class="k">else</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">f</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>MIPS assembly code</li>
</ul>

<pre><code class="language-assembly"># $s0 = f, $s1 = g, $s2 = h
# $s3 = i, $s4 = j
    bne $s3, $s4, L1
    add $s0, $s1, $s2
    j done
L1: sub $s0, $s0, $s3
done:
</code></pre>

<p><br /></p>

<h4 id="while-loops">While Loops</h4>

<ul>
  <li>C Code</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// determines the power</span>
<span class="c1">// of x such that 2x = 128</span>
<span class="kt">int</span> <span class="n">pow</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="n">pow</span> <span class="o">!=</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">pow</span> <span class="o">=</span> <span class="n">pow</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>MIPS assembly code</li>
</ul>

<pre><code class="language-assembly"># $s0 = pow, $s1 = x
    addi $s0, $0, 1
    add $s1, $0, $0
    addi $t0, $0, 128
while: beq $s0, $t0, done
    sll $s0, $s0, 1
    addi $s1, $s1, 1
    j while
done:
</code></pre>

<blockquote>
  <p>Assembly tests for the opposite case (pow == 128) of the C code (pow != 128).</p>
</blockquote>

<p><br /></p>

<h4 id="for-loops">For Loops</h4>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">initialization</span><span class="p">;</span> <span class="n">condition</span><span class="p">;</span> <span class="n">loop</span> <span class="n">operation</span><span class="p">)</span>
    <span class="n">statement</span>
</code></pre></div></div>

<ul>
  <li>initialization: executes before the loop begins</li>
  <li>condition: is tested at the beginning of each iteration</li>
  <li>loop operation: executes at the end of each iteration</li>
  <li>statement: executes each time the condition is met</li>
</ul>

<p><br /></p>

<ul>
  <li>High level code</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// add the numbers from 0 to 9</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">!=</span><span class="mi">10</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>MIPS assembly code</li>
</ul>

<pre><code class="language-assembly"># $s0 = i, $s1 = sum
    addi $s1, $0, 0
    add $s0, $0, $0
    addi $t0, $0, 10
for: beq $s0, $t0, done
    add $s1, $s1, $s0
    addi $s0, $s0, 1
    j for
done:
</code></pre>

<p><br /></p>

<h3 id="less-then-comparison">Less Then Comparison</h3>

<ul>
  <li>C Code</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// add the powers of 2 from 1 </span>
<span class="c1">// to 100</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">101</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>MIPS assembly code</li>
</ul>

<pre><code class="language-assembly"># $s0 = i, $s1 = sum
    addi $s1, $0, 0
    addi $s0, $0, 1
    addi $t0, $0, 101
loop: slt $t1, $s0, $t0
      beq $t1, $0, done
      add $s1, $s1, $s0
      sll $s0, $s0, 1
      j loop
done:
</code></pre>

<p><code class="language-plaintext highlighter-rouge">$t1=1 if i&lt;101</code></p>

<p><code class="language-plaintext highlighter-rouge">$t1=0 else if i &gt; 101</code></p>

<p>그래서 slt와 beq를 합쳐서 bgt를 사용하면 이를 알아서 slt+beq로 컴파일 해 준다.</p>

<ul>
  <li>beq에서는 101보다 작은지 큰지에 대한 정보인 t1의 정보와 0을 비교하여 loop를 빠져나가는 것이다.</li>
</ul>

<p><br /></p>

:ET