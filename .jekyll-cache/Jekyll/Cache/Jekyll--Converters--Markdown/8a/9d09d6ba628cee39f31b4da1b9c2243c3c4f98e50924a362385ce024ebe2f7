I"u7<p><br /></p>

<h2 id="review-processor-performance">Review: Processor Performance</h2>

<p><strong>Program Execution time</strong></p>

<p>= (#instructions)(cycles/instruction)(seconds/cycle)</p>

<p>=  # instructions x CPI x T<sub>C</sub></p>

<p><br /></p>

<h3 id="hdl-description">HDL description</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/163663941-1bd6af52-4b51-4e53-aded-d893480455ec.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/79521972/163663964-e1630f8b-37e8-466e-9ba5-f27cdf12294f.png" alt="image" /></p>

<p><br /></p>

<h3 id="review-processor-performance-1">Review: Processor Performance</h3>

<ul>
  <li>
    <p>Program Execution Time</p>

    <p>= (#instructions/program)(cycles/instruction)(seconds/cycle)</p>

    <p>= # instructions x CPI x T<sub>C</sub></p>
  </li>
</ul>

<p><br /></p>

<h2 id="single-cycle-performance">Single-Cycle Performance</h2>

<h3 id="critical-path">Critical path</h3>

<p>combinational logic에서 어떤 거는 빠르게 오고 어떤 거는 느리게 올텐데 이 중 가장 느린 경로가 critical path라고 한다.</p>

<p>clk cylce time을 결정하는 경로</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163316568-c5716494-8f5a-4759-8c45-c3de1fb67105.png" alt="image" /></p>

<blockquote>
  <p>T<sub>C</sub> limited by critical path (lw)</p>

  <p>clock period가 이를 수용할 수 있을 정도로 길어야 함.</p>
</blockquote>

<p><br /></p>

<h2 id="single-cycle-performance-1">Single-Cycle Performance</h2>

<ul>
  <li>Single-cycle critical path:
    <ul>
      <li>T<sub>c</sub> = t<sub>pcq_PC</sub> + t<sub>mem</sub> + max(t<sub>RFread</sub>, t<sub>sext </sub>+ t<sub>mux</sub>) + t<sub>ALU </sub>+  t<sub>mem </sub>+ t<sub>mux </sub>+ t<sub>RFsetup</sub></li>
    </ul>
  </li>
  <li>Typically, limiting paths are:
    <ul>
      <li>memory, ALU, register file</li>
      <li>Tc = t<sub>pcq_PC </sub>+ 2<sub>tmem</sub> + t<sub>RFread </sub>+ t<sub>mux </sub>+ t<sub>ALU </sub>+ t<sub>RFsetup</sub></li>
    </ul>
  </li>
  <li>t<sub>sext</sub> : sign extention</li>
</ul>

<p><br /></p>

<h3 id="example">Example</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/163317091-e2320006-0d1c-4fdf-b88e-d079dd6acfd7.png" alt="image" /></p>

<p>T<sub>C</sub> = t<sub>pcq_PC </sub>+ 2<sub>tmem</sub> + t<sub>RFread </sub>+ t<sub>mux </sub>+ t<sub>ALU </sub>+ t<sub>RFsetup</sub></p>

<p>= [30 + 2(250) + 150 + 25 + 200 + 20] ps</p>

<p>= 925ps</p>

<p><br /></p>

<p><strong>Program with 100 billion instrucitons:</strong></p>

<p>Execution Time = # instructions x CPI x T<sub>C</sub></p>

<p>​	= (100 x 10<sup>9</sup>) (1) (925 x 10<sup>-12</sup>s)</p>

<p>​	= 92.5 seconds</p>

<p><br /></p>

<h2 id="single-cycle의-문제점">Single cycle의 문제점</h2>

<p>명령어 별로 걸리는 시간차이가 다르기 때문에(lw는 엄청 느리고, J 나 beq는 굉장히 빠르다) 가장 긴 instruction 시간에 맞춰서 clock time을 정해야 하기 때문에 짧은 instruction은 클락이 끝나지 않았는데도 이미 벌써 끝나서 다음 클락을 기다리기 때문에 비효율적인 상황이 발생한다.</p>

<p>그래서 이를 해결하기 위한 방법 두 가지를 앞으로 소개해 보도록 하겠다.</p>

<ul>
  <li>Multi-Cycle</li>
  <li>Pipelining</li>
</ul>

<p><br /></p>

<h2 id="multi-cycle-mips-processor">Multi-cycle MIPS Processor</h2>

<ul>
  <li>Single-cycle
    <ul>
      <li>simple</li>
      <li>cycle time limited by longest instruction(lw)</li>
      <li>2 adders/ALUs &amp; 2 memories</li>
    </ul>
  </li>
  <li>Multicycle
    <ul>
      <li>single에서는 모든 명령어의 시간이 같았다면 multi는 clock을 나누어서 빨리 끝나는 명령어와 늦게 끝나는 명령어가 있게 되었다.</li>
      <li>higher clock speed</li>
      <li>simpler instructions run faster</li>
      <li><strong>reuse</strong> expensive hardware on multiple cycles (IM, DM, ALU 등)</li>
      <li>sequencing overhead paid many times</li>
      <li>5단계로 쪼개서 진행할 거임
        <ul>
          <li>나눴다는 얘기는 중간에 register file을 꼈다는 얘기</li>
        </ul>
      </li>
      <li>현재 어떤 cycle에 해당하냐에 따라 control signal이 다름
        <ul>
          <li>그래서 state마다 값들이 달라야 하므로 FSM 사용-&gt;state transition diagram</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Same design steps: datapath &amp; control</li>
  <li>faster clock이 관건</li>
  <li>overhead: setup time, t<sub>pcq</sub></li>
</ul>

<hr />

<p>Q) 그럼 multi-cycle은 CPI가 5인 것인가?</p>

<p>A) 평균으로 구함</p>

<p><br /></p>

<h2 id="multi-cycle-state-elements">Multi-cycle State Elements</h2>

<ul>
  <li>Replace Instruction and Data memories with a <strong>single unified memory</strong> - more realistic</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/163318235-4f83f79c-64c3-4b23-812a-ebedc5e426d2.png" alt="image" /></p>

<p><br /></p>

<h2 id="multi-cycle-datapath">Multi-cycle Datapath</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/163664613-fdb2c99d-de65-49f9-98dc-3995fd39767d.png" alt="image" style="zoom: 67%;" /></p>

<p>위와 같이 나누어서 생각해 보자.(골고루 나누어야 효율적이기 때문)</p>

<p>그러면 중간 중간 데이터를 담아야할 register를 끼워 주어야 함(clock이 지나면 잊어버리기 때문에 저장해 놓는 것)</p>

<p><br /></p>

<h3 id="instruction-fetch">Instruction Fetch</h3>

<p><strong>STEP 1</strong>: Fetch instruciton</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163318563-20683324-2094-4bee-94d9-37186b3f57e8.png" alt="image" /></p>

<ul>
  <li>
    <p>Instruction Fetch를 진행한다.</p>
  </li>
  <li>
    <p>Instruction Register에 저장.</p>
  </li>
  <li>
    <p>이 때, ALU는 놀고 있기 때문에 program + 4도 진행한다.</p>
  </li>
</ul>

<p><br /></p>

<h3 id="lw-register-reador-instruction-decode">lw Register Read(or instruction decode)</h3>

<p><strong>STEP 2a</strong>: Read source operands from RF</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163318650-50b76804-035f-4fac-bff4-9c7c3d0b05a8.png" alt="image" /></p>

<ul>
  <li>opcode를 보고 이 코드를 통해 control에서 무슨 명령어인지 파악하여 각 control signal을 보내준다.</li>
</ul>

<p><br /></p>

<p><strong>STEP 2b</strong>: Sign-extend the immediate</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163318711-cdff79c6-1284-495b-800c-2ceb6cff3c7e.png" alt="image" /></p>

<p><br /></p>

<h3 id="lw-addressor-execute-operation">lw Address(or execute operation)</h3>

<p><strong>STEP 3</strong>: Compute the memory address</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163318760-c989c8e5-da19-472a-b497-468eb22d3fe6.png" alt="image" /></p>

<ul>
  <li>+ 연산을 진행하여 결과를 register에 저장.</li>
</ul>

<p><br /></p>

<h3 id="lw-memory-read">lw Memory Read</h3>

<p><strong>STEP 4</strong>: Read Data from memory</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163318817-65fc381f-74b8-4396-bd74-080fa6167986.png" alt="image" /></p>

<p>IorD에 따라 data memory에 저장해야 하기 때문에 IorD는 1이 될 것이고 이 결과가 data memory에 저장된다.</p>

<p>data memory에 있는 것을 읽어서 asych하게 <strong>data register</strong>에 넣어준다.</p>

<p><br /></p>

<h3 id="lw-write-register">lw Write Register</h3>

<p><strong>STEP 5</strong>: Write back data block to register file</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163318898-592f5575-5710-4d3c-85f0-a06d0b94580a.png" alt="image" /></p>

<p><br /></p>

<h3 id="increment-pc">Increment PC</h3>

<p>Increment PC -&gt; 사실상 step 1에서도 가능하다 (step1(fetch)에서 ALU는 놀고있기 떄문에)</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163318941-75401a83-a096-46c1-9ecf-54e7a8c70606.png" alt="image" /></p>

<p><br /></p>

<h2 id="multicycle-datapath-sw">Multicycle Datapath: sw</h2>

<p>Write data in <code class="language-plaintext highlighter-rouge">rt</code> to memory</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163319230-0b43383e-4633-4a92-83d2-1dc064600bc8.png" alt="image" /></p>

<p>RF에 저장할 필요가 없기 때문에 4 cycle이면 된다.</p>

<p><br /></p>

<h2 id="multi-cycle-datapath-r-type">Multi-cycle Datapath: R-Type</h2>

<ul>
  <li>Read from rs and rt</li>
  <li>Write ALUResult to register file</li>
  <li>Write to rd (instead of rt)</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/163319372-c75ed7cd-c410-41e2-8f63-7d0c1b1df1ce.png" alt="image" /></p>

<p><br /></p>

<h2 id="multicycle-datapath-beq">Multicycle Datapath: beq</h2>

<ul>
  <li>rs == rt?</li>
  <li>BTA = (sign-extended immediate « 2) + (PC+4)</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/163319461-a42a7688-4c69-4d92-be12-3e0239f0c223.png" alt="image" /></p>

<p>3번째 clock에서는 ALU를 쓰고 있기 때문에(빼기 연산) BTA를 계산하는 과정을 3번째 clock에는 넣으면 안 된다.</p>

<p>그러므로 두 번째 cycle에서 BTA를 만들어 놓고 3번째 clock에서 두 값의 조건을 확인하는 용도로 ALU를 사용한다.</p>

<p><br /></p>

<h2 id="multicycle-processor">Multicycle Processor</h2>

<p>Finite State Machine이 사용됨</p>

<ul>
  <li>lw 명령에서는 총 5번에 해당하는 cycle이 진행되어 각 클락마다, 즉 현재 어떤 상태이냐에 따라 값이 다를 수 있기 때문에 FSM을 사용하는 것이다.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/163319943-0a3c6e37-1aed-4115-bd87-43eb7917b054.png" alt="image" /></p>

<p>5단계로 쪼갰기 떄문에 4개의 register가 추가됨</p>

<p><br /></p>

<h3 id="multicycle-control">Multicycle control</h3>

<p>Control unit을 main controller와 ALU decoder 로 나누었음.</p>

<p>Control에는 <strong>Mux control</strong>과 <strong>Write enable 신호</strong>가 있다.</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163319968-2d16856f-81aa-4f71-a46b-0273be9288da.png" alt="image" /></p>

<p><br /></p>

<h2 id="main-controller-fsm">Main Controller FSM:</h2>

<p>FSM: moore machine</p>

<h3 id="fetch">Fetch</h3>

<ul>
  <li><strong>MUX select signals</strong> are listed only when their value matters; otherwise, they are  <span style="color:red">don’t cares.</span></li>
  <li><strong>Enable signals</strong> are listed only when they are asserted; otherwise, they are <span style="color:red">0</span>.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/163320341-b9098d78-663d-4ca7-ab21-2d58dee31868.png" alt="image" /></p>

<h3 id="fetch-1">Fetch</h3>

<p>IR &lt;- Mem[PC]    // IorD = 0 , IRWrite</p>

<p>PC &lt;- PC + 4     //AluSrcA, ……</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163320381-9f302d66-0863-41bd-bce0-f615fcc5bfce.png" alt="image" /></p>

<hr />

<p><br /></p>

<h3 id="decode">Decode</h3>

<p>A &lt;- RF[A1]</p>

<p>B &lt;- RF[A2]</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163320512-6b024061-4437-4127-be2c-4e6d5bf6695f.png" alt="image" /></p>

<p>control 신호가 필요없어서 안 씀</p>

<p><br /></p>

<h3 id="address">Address</h3>

<p>lw or sw</p>

<p><br /></p>

<p>ALUResult &lt;- A + Imm</p>

<p>ALU register에 저장</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163320906-af47a9a6-bbaf-4376-81aa-73a52853b231.png" alt="image" /></p>

<p><br /></p>

<h3 id="lw">lw</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/163320993-9691fc38-f9a4-4329-9e48-ef2414b4fcae.png" alt="image" /></p>

<ul>
  <li>5 clock 걸림</li>
</ul>

<p>Data &lt;- Mem[ALUout]         :4번째 ; data register에 저장하는 과정</p>

<p>RF[A3] &lt;- Data						: 5번째 ; data에 저장된 내용을 register file에 저장하는 과정</p>

<p><br /></p>

<h3 id="sw">sw</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/163321169-eb29fbb9-da87-40bc-aa3a-9ada7138e4d2.png" alt="image" /></p>

<p>memory에 write하고 다시 Fetch 과정으로 돌아감</p>

<p><br /></p>

<h3 id="r-type">R-Type</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/163321190-12038b72-9d49-450a-9c3a-154a22f8aeb9.png" alt="image" /></p>

<p>register write</p>

<p>state에 따라 각각의 control signal이 다르기 때문에 FSM 사용하는 것.</p>

<p><br /></p>

<h3 id="beq">beq</h3>

<p>ALUout &lt;- PC + 4 + Imm « 2        // 두 번째 cycle에서 BTA 계산</p>

<p>if (A == B) PC &lt;- ALUout        //세 번째 cycle</p>

<p><img src="https://user-images.githubusercontent.com/79521972/163321398-a5f42e57-717c-4815-b4d5-03ba489c06b3.png" alt="image" /></p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/79521972/163321552-d17db61e-fb61-4825-9632-306b32b2aca1.png" alt="image" /></p>

<p><br /></p>

<h3 id="extended-functionality-addi">Extended Functionality: addi</h3>

<p><img src="https://user-images.githubusercontent.com/79521972/163321678-9b4b3426-b3bd-402b-8626-938b4a040ed7.png" alt="image" /></p>

<ul>
  <li>하나는 A에서 하나는 immediate에서</li>
  <li>사실상 S2, S9은 같기 때문에 위처럼 해도 되고 연결을 공유해도 됨</li>
</ul>

<p><br /></p>

<h2 id="extended-functionality-j">Extended Functionality: j</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/163914564-1282beef-aae3-4f07-a30c-098ee80559d1.png" alt="image" /></p>

<h2 id="main-controller-fsm-j">Main Controller FSM: j</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/163914641-21d48144-40c4-42a7-84df-49edc7716a49.png" alt="image" /></p>

<h2 id="multicycle-processor-1">Multicycle Processor</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/163914998-fe973c5c-584a-4984-95a7-19ec8ace90b7.png" alt="image" /></p>

:ET