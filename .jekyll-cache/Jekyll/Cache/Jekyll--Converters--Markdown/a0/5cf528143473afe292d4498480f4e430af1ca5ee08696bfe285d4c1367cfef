I"t<h1 id="chapter-7-synchronization-examples">Chapter 7: Synchronization Examples</h1>

<ul>
  <li>Classic Problems of Synchronization
    <ul>
      <li>the bounded-buffer synchronization problem</li>
      <li>the readers-writers synchronization problem</li>
      <li>The dining-philosophers synchronization problems</li>
    </ul>
  </li>
  <li>Synchronization within the Kernel</li>
  <li>the tools used by Linux and Windows to solve synchronization problems.</li>
  <li>POSIX Synchronization</li>
  <li>Synchronization in Java</li>
  <li>Alternative Approaches</li>
</ul>

<p><br /></p>

<h2 id="classical-problems-of-synchronization">Classical Problems of Synchronization</h2>

<ul>
  <li>Classical problems used to test newly-proposed synchronization  schemes
    <ul>
      <li>Bounded-Buffer Problem</li>
      <li>Readers and Writers Problem</li>
      <li>Dining-Philosophers Problem</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="bounded-buffer-problem">Bounded-Buffer Problem</h2>

<ul>
  <li>n buffers, each can hold one item</li>
  <li>Semaphore mutex initialized to the value 1</li>
  <li>Semaphore full initialized to the value 0</li>
  <li>Semaphore empty initialized to the value n</li>
</ul>

<p><br /></p>

<h2 id="bounded-buffer-problem-cont">Bounded Buffer Problem (Cont.)</h2>

<ul>
  <li>The structure of the producer process</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002214616833.png" alt="image-20221002214616833" /></p>

<p><br /></p>

<h2 id="bounded-buffer-problem-cont-1">Bounded Buffer Problem (Cont.)</h2>

<ul>
  <li>The structure of the consumer process</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002214648618.png" alt="image-20221002214648618" /></p>

<p><br /></p>

<h2 id="readers-writers-problem">Readers-Writers Problem</h2>

<ul>
  <li>A data set is shared among a number of concurrent processes
    <ul>
      <li>Readers – only read the data set; they do not perform any updates</li>
      <li>Writers – can both read and write</li>
    </ul>
  </li>
  <li>Determine need for mutex based on nature of processes
    <ul>
      <li>Readers : allow multiple readers can read data simultaneously</li>
      <li>Writers : Only one single writer can access the shared data at the same time
        <ul>
          <li>restrict to 1 at a time (mutex)</li>
          <li>Also writers should have exclusive access to data
            <ul>
              <li>Should not have reader reading while writer is writing</li>
              <li>Readers in CS should block writers from entering CS</li>
              <li>Writers in CS should block readers and other writers from entering  CS</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Several variations of how readers and writers are considered – all involve some  form of priorities</li>
</ul>

<p><br /></p>

<h2 id="readers-writers-problem-cont">Readers-Writers Problem (Cont.)</h2>

<ul>
  <li>
    <p>Shared Data</p>

    <ul>
      <li>
        <p>Data set</p>
      </li>
      <li>
        <p>Semaphore rw_mutex initialized to 1   // rw_mutex functions as a mutex semaphore</p>

        <p>​																	// for writers. used by first or last reader</p>

        <p>​																	// that enters or exists cs</p>
      </li>
      <li>
        <p>Semaphore mutex initialized to 1         // mutex is used to ensure mutex when</p>

        <p>​																	// read_count is updated</p>
      </li>
      <li>
        <p>Integer read_count initialized to 0</p>
      </li>
    </ul>
  </li>
  <li>
    <p>The structure of a writer process</p>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002215006472.png" alt="image-20221002215006472" /></p>

<p><br /></p>

<h2 id="readers-writers-problem-cont-1">Readers-Writers Problem (Cont.)</h2>

<ul>
  <li>The structure of a reader process</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002215037719.png" alt="image-20221002215037719" /></p>

<p><br /></p>

<h2 id="readers-writers-problem-variations">Readers-Writers Problem Variations</h2>

<ul>
  <li>The solution in previous slide can result in a situation where a writer process  never writes. It is referred to as the “First reader-writer” problem.</li>
  <li>First variation - Reader’s priority
    <ul>
      <li>no reader kept waiting unless writer has permission to use shared object</li>
      <li>No reader should wait simply because a writer is ready</li>
      <li>Readers obtain access to CS when needed</li>
      <li>Only block if writer has access to CS</li>
      <li>Writers may starve</li>
    </ul>
  </li>
  <li>Second variation - Writer’s priority
    <ul>
      <li>once writer is ready, it performs the write ASAP</li>
      <li>If a writer is waiting to access a object, no new readers may start reading</li>
      <li>Readers may starve</li>
    </ul>
  </li>
  <li>Both may have starvation leading to even more variations</li>
  <li>Problem is solved on some systems by kernel providing reader-writer locks</li>
</ul>

<p><br /></p>

<h2 id="dining-philosophers-problem">Dining-Philosophers Problem</h2>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002215159971.png" alt="image-20221002215159971" /></p>

<ul>
  <li>Philosophers spend their lives alternating thinking and eating</li>
  <li>Don’t interact with their neighbors, occasionally try to pick up 2  chopsticks (one at a time) to eat from bowl
    <ul>
      <li>Need both to eat, then release both when done</li>
    </ul>
  </li>
  <li>In the case of 5 philosophers
    <ul>
      <li>Shared data
        <ul>
          <li>Bowl of rice (data set)</li>
          <li>Semaphore chopstick [5] initialized to 1</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="monitor-with-condition-variables">Monitor with condition variables</h2>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002215244131.png" alt="image-20221002215244131" /></p>

<p><br /></p>

<h2 id="dining-philosophers-problem-algorithm">Dining-Philosophers Problem Algorithm</h2>

<ul>
  <li>
    <p>Semaphore Solution</p>
  </li>
  <li>
    <p>The structure of Philosopher i :</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">){</span> 
    <span class="n">wait</span> <span class="p">(</span><span class="n">chopstick</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
    <span class="n">wait</span> <span class="p">(</span><span class="n">chopStick</span><span class="p">[</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">5</span><span class="p">]</span> <span class="p">);</span>
    <span class="cm">/* eat for awhile */</span>
    <span class="n">signal</span> <span class="p">(</span><span class="n">chopstick</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
    <span class="n">signal</span> <span class="p">(</span><span class="n">chopstick</span><span class="p">[</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">5</span><span class="p">]</span> <span class="p">);</span>
    <span class="cm">/* think for awhile */</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>What is the problem with this algorithm?</p>
  </li>
</ul>

<p><br /></p>

<h2 id="monitor-solution-to-dining-philoshophers">Monitor Solution to Dining Philoshophers</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monitor</span> <span class="n">DiningPhilosophers</span>
<span class="p">{</span> 
    <span class="k">enum</span> <span class="p">{</span> <span class="n">THINKING</span><span class="p">;</span> <span class="n">HUNGRY</span><span class="p">,</span> <span class="n">EATING</span><span class="p">)</span> <span class="n">state</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="p">;</span>
          <span class="n">condition</span> <span class="n">self</span> <span class="p">[</span><span class="mi">5</span><span class="p">];</span>
          <span class="kt">void</span> <span class="n">pickup</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span> 
              <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">HUNGRY</span><span class="p">;</span>
              <span class="n">test</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">EATING</span><span class="p">)</span> <span class="n">self</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">wait</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="kt">void</span> <span class="n">putdown</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span> 
              <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">THINKING</span><span class="p">;</span>
              <span class="c1">// test left and right neighbors</span>
              <span class="n">test</span><span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">%</span> <span class="mi">5</span><span class="p">);</span>
              <span class="n">test</span><span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">5</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="kt">void</span> <span class="n">test</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span> 
              <span class="k">if</span> <span class="p">((</span><span class="n">state</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">%</span> <span class="mi">5</span><span class="p">]</span> <span class="o">!=</span> <span class="n">EATING</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
                  <span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">HUNGRY</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
                  <span class="p">(</span><span class="n">state</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">5</span><span class="p">]</span> <span class="o">!=</span> <span class="n">EATING</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span> 
                  <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">EATING</span> <span class="p">;</span>
                  <span class="n">self</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">signal</span> <span class="p">()</span> <span class="p">;</span>
              <span class="p">}</span>
          <span class="p">}</span>
          <span class="n">initialization_code</span><span class="p">()</span> <span class="p">{</span> 
              <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
                  <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">THINKING</span><span class="p">;</span>
          <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="solution-to-dining-philosophers-cont">Solution to Dining Philosophers (Cont.)</h2>

<ul>
  <li>Each philosopher “i” invokes the operations pickup() and  putdown() in the following sequence:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002215440221.png" alt="image-20221002215440221" /></p>

<ul>
  <li>No deadlock, but starvation is possible</li>
</ul>

<p><br /></p>

<h2 id="a-monitor-to-allocate-single-resource">A monitor to allocate single resource</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Monitor</span> <span class="n">ResourceAllocation</span> <span class="p">{</span>
    <span class="n">boolean</span> <span class="n">busy</span><span class="p">;</span> 
    <span class="n">condition</span> <span class="n">x</span><span class="p">;</span> 
    <span class="kt">void</span> <span class="n">acquire</span> <span class="p">(</span><span class="kt">int</span> <span class="n">time</span><span class="p">){</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">busy</span><span class="p">)</span>
            <span class="n">x</span><span class="p">.</span><span class="n">wait</span> <span class="p">(</span><span class="n">time</span><span class="p">);</span>
        <span class="n">busy</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="n">release</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">busy</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="n">x</span><span class="p">.</span><span class="n">signal</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">busy</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ResourceAlocation</span> <span class="n">R</span><span class="p">;</span>

<span class="n">R</span><span class="p">.</span><span class="n">acquire</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
	<span class="n">access</span> <span class="n">the</span> <span class="n">resource</span>
<span class="n">R</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="synchronization-examples">Synchronization Examples</h2>

<ul>
  <li>Solaris</li>
  <li>Windows</li>
  <li>Linux</li>
  <li>Pthread</li>
  <li>Java</li>
</ul>

<p><br /></p>

<h2 id="solaris-synchronization">Solaris Synchronization</h2>

<ul>
  <li>Implements a variety of locks to support multitasking, multithreading  (including real-time threads), and multiprocessing</li>
  <li>Uses adaptive mutexes for efficiency when protecting data from short  code segments
    <ul>
      <li>Starts as a standard semaphore spin-lock</li>
      <li>If lock held, and by a thread running on another CPU, spins</li>
      <li>If lock held by non-run-state thread, block and sleep waiting for signal of  lock being released</li>
    </ul>
  </li>
  <li>Uses condition variables and readers-writers locks when longer  sections of code need access to data</li>
  <li>Uses turnstiles to order the list of threads waiting to acquire either an  adaptive mutex or reader-writer lock</li>
  <li>Turnstiles are per-lock-holding-thread, not per-object</li>
  <li>Priority-inheritance per-turnstile gives the running thread the highest of the priorities of the threads in its turnstile</li>
  <li>Uses readers-writers locks when longer sections of code need access  to data</li>
</ul>

<p><br /></p>

<h2 id="kernel-synchronization---windows">Kernel Synchronization - Windows</h2>

<ul>
  <li>Uses interrupt masks to protect access to global resources on  uniprocessor systems</li>
  <li>Uses spinlocks on multiprocessor systems
    <ul>
      <li>Spinlocking-thread will never be preempted</li>
    </ul>
  </li>
  <li>Also provides dispatcher objects
    <ul>
      <li>The kernel defines a set of object types called kernel dispatcher  objects, or just dispatcher objects.</li>
      <li>Dispatcher objects include timer objects, event objects,  semaphore objects, mutex objects, and thread objects.</li>
      <li>Events
        <ul>
          <li>An event acts much like a condition variable</li>
        </ul>
      </li>
      <li>Timers notify one or more thread when time expired</li>
      <li>Dispatcher objects either signaled-state (object available) or  non-signaled state (thread will block)</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>Every kernel-defined dispatcher object type has a state that is  either set to Signaled or set to Not-Signaled.</li>
  <li>Mutex dispatcher object</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220101063.png" alt="image-20221002220101063" /></p>

<p><br /></p>

<h2 id="linux-synchronization">Linux Synchronization</h2>

<ul>
  <li>Linux:
    <ul>
      <li>Prior to kernel Version 2.6, Linux was a non-preemptive kernel
        <ul>
          <li>disables interrupts to implement short critical sections</li>
        </ul>
      </li>
      <li>Version 2.6 and later, fully preemptive
        <ul>
          <li>A task can be preempted when it is running in kernel</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Linux provides:
    <ul>
      <li>atomic integers</li>
      <li>spinlocks</li>
      <li>semaphores</li>
      <li>reader-writer versions of both (spinlock, semaphores)</li>
    </ul>
  </li>
  <li>On single-CPU system, spinlocks replaced by enabling and  disabling kernel preemption</li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>atomic variables</p>
  </li>
  <li>
    <p>atomic_t is the type for atomic integer</p>
  </li>
  <li>
    <p>Simplest synchronization tool within Linux kernel</p>
  </li>
  <li>
    <p>All math operations using atomic integers are performed without interruption</p>
  </li>
  <li>
    <p>Atomic operations do not need the overhead of locking mechanism</p>
  </li>
  <li>
    <p>atomic_t counter;</p>
  </li>
  <li>
    <p>int value</p>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220244235.png" alt="image-20221002220244235" /></p>

<p><br /></p>

<h2 id="mutex_lock-spin_lock">mutex_lock, spin_lock</h2>

<ul>
  <li>
    <p>Mutex lock is used to protect critical sections within kernel</p>

    <p>mutex_lock()</p>

    <p>critical section // sleep is possible</p>

    <p>mutex_unlock()</p>
  </li>
  <li>
    <p>Reader-writer version</p>
  </li>
  <li>
    <p>Spin lock &amp; semaphore are used for locking in the kernel</p>

    <ul>
      <li>On SMP machine, spinlock is a fundamental locking mechanism</li>
      <li>On single-CPU system, spinlocks is not inappropriate
        <ul>
          <li>enabling and disabling kernel preemption</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220430057.png" alt="image-20221002220430057" /></p>

<p><br /></p>

<h2 id="pthread-posix-synchronization">Pthread (POSIX) Synchronization</h2>

<ul>
  <li>Pthreads API is OS-independent user level threads</li>
  <li>Widely used on UNIX, Linux, and macOS</li>
  <li>It provides:
    <ul>
      <li>mutex locks</li>
      <li>Semaphore (named, unnamed)</li>
      <li>condition variable</li>
    </ul>
  </li>
  <li>Non-portable extensions include:
    <ul>
      <li>read-write locks</li>
      <li>spinlocks</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="posix-mutex-locks">POSIX Mutex Locks</h2>

<ul>
  <li>Fundamental synchronization tool used with Pthreads</li>
  <li>Creating and initializing the lock</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220547561.png" alt="image-20221002220547561" /></p>

<ul>
  <li>Acquiring and releasing the lock</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220601230.png" alt="image-20221002220601230" /></p>

<p><br /></p>

<h2 id="posix-semaphores">POSIX Semaphores</h2>

<ul>
  <li>POSIX provides two versions – <strong>named</strong> and <strong>unnamed</strong>.</li>
  <li>Named semaphores can be used by unrelated processes, unnamed  cannot.</li>
</ul>

<p><br /></p>

<h2 id="posix-named-semaphores">POSIX Named Semaphores</h2>

<ul>
  <li>Creating an initializing the semaphore:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220656274.png" alt="image-20221002220656274" /></p>

<ul>
  <li>Another process can access the semaphore by referring to its name SEM.</li>
  <li>Acquiring and releasing the semaphore:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220712037.png" alt="image-20221002220712037" /></p>

<p><br /></p>

<h2 id="posix-unnamed-semaphores">POSIX Unnamed Semaphores</h2>

<ul>
  <li>Creating an initializing the semaphore:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220736432.png" alt="image-20221002220736432" /></p>

<ul>
  <li>Acquiring and releasing the semaphore:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220749296.png" alt="image-20221002220749296" /></p>

<p><br /></p>

<h2 id="posix-condition-variables">POSIX Condition Variables</h2>

<ul>
  <li>Since POSIX is typically used in C/C++ and these languages do not  provide a monitor, POSIX condition variables are associated with a  POSIX mutex lock to provide mutual exclusion: Creating and initializing  the condition variable:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220813118.png" alt="image-20221002220813118" /></p>

<p><br /></p>

<h2 id="posix-condition-variables-1">POSIX Condition Variables</h2>

<ul>
  <li>Thread waiting for the condition a == b to become true:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220839484.png" alt="image-20221002220839484" /></p>

<ul>
  <li>Thread signaling another thread waiting on the condition variable:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220851449.png" alt="image-20221002220851449" /></p>

<p><br /></p>

<h2 id="monitor-with-condition-variables-1">Monitor with condition variables</h2>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002220914354.png" alt="image-20221002220914354" /></p>

<p><br /></p>

<h2 id="java-synchronization">Java Synchronization</h2>

<ul>
  <li>Java provides rich set of synchronization features:
    <ul>
      <li>Java monitors</li>
      <li>Reentrant locks</li>
      <li>Semaphores</li>
      <li>Condition variables</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="java-monitors">Java Monitors</h2>

<ul>
  <li>Concurrency mechanism for thread synchronization</li>
  <li>Every Java object has associated with it a single lock.</li>
  <li>If a method is declared as synchronized, a calling thread must own  the lock for the object. (single thread can be active in a monitor)</li>
  <li>If the lock is owned by another thread, the calling thread must wait for  the lock until it is released. (entry Q)</li>
  <li>Locks are released when the owning thread exits the synchronized method.</li>
</ul>

<p><br /></p>

<h2 id="bounded-buffer---java-synchronization">Bounded Buffer - Java Synchronization</h2>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221030098.png" alt="image-20221002221030098" /></p>

<p><br /></p>

<h2 id="java-synchronization-1">Java Synchronization</h2>

<ul>
  <li>A thread that tries to acquire an unavailable lock is placed in the  object’s entry set: (entry Queue)</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221058784.png" alt="image-20221002221058784" /></p>

<p><br /></p>

<ul>
  <li>Similarly, each object also has a wait set. (condition Queue)</li>
  <li>When a thread calls wait():
    <ol>
      <li>It releases the lock for the object</li>
      <li>The state of the thread is set to blocked</li>
      <li>The thread is placed in the wait set for the object</li>
    </ol>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221134732.png" alt="image-20221002221134732" /></p>

<p><br /></p>

<ul>
  <li>
    <p>A thread typically calls wait() when it is waiting for a condition to  become true.</p>
  </li>
  <li>
    <p>How does a thread get notified?</p>
  </li>
  <li>
    <p>When a thread calls notify():</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	1. An arbitrary thread T is selected from the wait set 
</code></pre></div>    </div>

    <ol>
      <li>
        <p>T is moved from the wait set to the entry set</p>
      </li>
      <li>
        <p>Set the state of T from blocked to runnable.</p>
      </li>
    </ol>
  </li>
  <li>
    <p>T can now compete for the lock to check if the condition it was waiting  for is now true</p>
  </li>
</ul>

<p><br /></p>

<h2 id="bounded-buffer---java-synchronization-1">Bounded Buffer - Java Synchronization</h2>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221326154.png" alt="image-20221002221326154" /></p>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221334049.png" alt="image-20221002221334049" /></p>

<p><br /></p>

<h2 id="java-reentrant-locks">Java Reentrant Locks</h2>

<ul>
  <li>Similar to mutex locks</li>
  <li>The finally clause ensures the lock will be released in case an  exception occurs in the try block.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221438670.png" alt="image-20221002221438670" /></p>

<p><br /></p>

<h2 id="java-semaphores">Java Semaphores</h2>

<ul>
  <li>Constructor:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221508302.png" alt="image-20221002221508302" /></p>

<ul>
  <li>Usage:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221520120.png" alt="image-20221002221520120" /></p>

<p><br /></p>

<h2 id="java-condition-variables">Java Condition Variables</h2>

<ul>
  <li>
    <p>condition variables provide similar functionality to wait() &amp; notify()</p>
  </li>
  <li>
    <p>To provide mutual exclusion, a condition variable is associated with an  ReentrantLock. (java’s syncronized)</p>
  </li>
  <li>
    <p>Creating a condition variable by first first creating a ReentrantLock:  and invoking its newCondition() method of ReentrantLock:</p>

    <p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221555261.png" alt="image-20221002221555261" /></p>
  </li>
  <li>
    <p>A thread waits by calling the await() method, and signals by calling  the signal() method of condition variable.</p>
  </li>
</ul>

<p><br /></p>

<h2 id="monitor-with-condition-variables-2">Monitor with condition variables</h2>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221616890.png" alt="image-20221002221616890" /></p>

<p><br /></p>

<h2 id="java-condition-variables-1">Java Condition Variables</h2>

<ul>
  <li>Example: Five threads numbered 0 .. 4</li>
  <li>Shared variable turn indicating which thread’s turn it is.</li>
  <li>Thread calls doWork() when it wishes to do some work.
    <ul>
      <li>But it may only do work if it is their turn.</li>
    </ul>
  </li>
  <li>If not their turn, wait</li>
  <li>If their turn, do some work for awhile ……</li>
  <li>When completed, notify the thread whose turn is next.</li>
  <li>Necessary data structures:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221700820.png" alt="image-20221002221700820" /></p>

<p><br /></p>

<h2 id="java-condition-variables-2">Java Condition Variables</h2>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221735544.png" alt="image-20221002221735544" /></p>

<p><br /></p>

<h2 id="alternative-approaches">Alternative Approaches</h2>

<ul>
  <li>Transactional Memory</li>
  <li>OpenMP</li>
  <li>Functional Programming Languages</li>
</ul>

<p><br /></p>

<h2 id="transactional-memory">Transactional Memory</h2>

<ul>
  <li>Consider a function update() that must be called atomically. One option is  to use mutex locks:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221916655.png" alt="image-20221002221916655" /></p>

<ul>
  <li>Synchronization mechanism such as semaphores, mutex locks has  deadlock and scalability problem, as the number of threads increases</li>
  <li>A memory transaction is a sequence of read-write operations to  memory that are performed atomically. A transaction can be completed  by adding atomic{S} which ensure statements in S are executed  atomically:</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002221936000.png" alt="image-20221002221936000" /></p>

<ul>
  <li>Software transaction memory
    <ul>
      <li>Implemented in software</li>
    </ul>
  </li>
  <li>Hardware transaction memory</li>
  <li>Growth of multicore systems and emphasis on concurrent and parallel  programming have prompted significant research in this area.</li>
</ul>

<p><br /></p>

<h2 id="openmp">OpenMP</h2>

<ul>
  <li>OpenMP is a set of compiler directives and API that support parallel  progamming.</li>
  <li>#pragma omp parallel</li>
</ul>

<p><img src="https://raw.githubusercontent.com/speardragon/save-image-repo/main/img/image-20221002222021494.png" alt="image-20221002222021494" /></p>

<ul>
  <li>The code contained within the #pragma omp critical directive is  treated as a critical section and performed atomically.</li>
</ul>

<p><br /></p>

<h2 id="functional-programming-languages">Functional Programming Languages</h2>

<ul>
  <li>Imperative (procedure-oriented) language: C, C++, Java</li>
  <li>Functional programming languages offer a different paradigm  than procedural languages in that they do not maintain state.</li>
  <li>Variables are treated as immutable and cannot change state  once they have been assigned a value.</li>
  <li>There is increasing interest in functional languages such as  Erlang and Scala for their approach in handling data races.</li>
</ul>

:ET