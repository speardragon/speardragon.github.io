I"оо<p><br /></p>

<h1 id="101-КЁ─Л┬≤Л≥─-К╘■К╙╗К╕╛">10.1 КЁ─Л┬≤Л≥─ К╘■К╙╗К╕╛</h1>

<h2 id="М■└К║°Л└╦Л┼╓">М■└К║°Л└╦Л┼╓</h2>

<ul>
  <li>М■└К║°Л└╦Л┼╓К┼■ Л▀╓М√┴ Л╓▒Л²╦ М■└К║°Й╥╦К·╗Л²╢К▀╓.</li>
  <li>М■└К║°Й╥╦К·╗ Л▀╓М√┴Л²└ Л°└М∙╢Л└°К┼■
    <ul>
      <li>М■└К║°Й╥╦К·╗Л²≤ Л╫■К⌠°, К█╟Л²╢М└╟, Л┼╓М┐²,  М·≥, U-Л≤│Л≈╜ К⌠╠Л²╢ М∙└Л ■М∙≤К▀╓.</li>
    </ul>
  </li>
  <li>М■└К║°Л└╦Л┼╓ Л²╢К╞╦Л╖─(Й╣╛Л║╟)К┼■ К╘■К╙╗К╕╛ К┌╢Л²≤ М■└К║°Л└╦Л┼╓ К═┬Л²╢Л∙└Л⌡┐</li>
  <li>М■└К║°Й╥╦К·╗(program definition) Л·░Л╡╢Й╟─ М■└К║°Л└╦Л┼╓(program instance)К┼■ Л∙└К▀┬К▀╓ !</li>
</ul>

<p><br /></p>

<h2 id="the-process-address-spaceМ■└К║°Л└╦Л┼╓-Лё╪Л├▄-ЙЁ╣Й╟└">The Process Address Space(М■└К║°Л└╦Л┼╓ Лё╪Л├▄ ЙЁ╣Й╟└)</h2>

<ul>
  <li>Linux <strong>virtualizes</strong> its physical resource of memory</li>
  <li>Processes do not directly address physical memory.</li>
  <li>Instead, the kernel associates each process with a unique <strong>virtual</strong> <strong>address space</strong>.
    <ul>
      <li>program definitionЛ≈░Л└° М■└К║°Л└╦Л┼╓Й╟─ К╖▄К⌠╓Л√╢Л╖─К╘╢ М■└К║°Л└╦Л┼╓ К╖┬К▀╓ VASЙ╟─ М∙═К▀╧К░°К▀╓.</li>
    </ul>
  </li>
  <li>This address space is <strong>linear</strong>, with addresses <strong>starting at zero</strong>, and increasing to some maximum value</li>
  <li>Pages and Paging
    <ul>
      <li>The virtual address space is composed of <strong>pages</strong>.</li>
      <li>The system architecture and machine type determine the size of a page, which is fixed;
        <ul>
          <li>typical sizes include 4 KB (for 32-bit systems), and 8 KB (for 64-bit systems)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="paging-model">Paging Model</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/168198658-5f67ba47-8f05-46c7-b542-197692732d02.png" alt="image" /></p>

<ul>
  <li>
    <p>CPUК║°К╤─М└╟ Л╤°К╟°М∙≤К┼■ Лё╪Л├▄ -&gt; logical address</p>
  </li>
  <li>MemЛ²≤ Лё╪Л├▄ -&gt; physical address</li>
  <li>Й╥╦К·≤Л└° Лё╪Л├▄ К╡┬Л≈╜Л²└ К▀╢К▀╧М∙≤К┼■ MMUК²╪К┼■ Л╧╘Л≈░Л└° К╡┬Л≈╜Л²╢ К░°К▀╓. (V-&gt;P)</li>
</ul>

<p>virtual addressЛ≈░Л└°К┼■ contiguous and linearМ∙≤Й╡▄ Л═─Л·╔К░≤Л√╢ Л·┬Л²▄</p>

<p>Paging Й╦╟К╡∙: Л≈╟Л├█К░° logical memoryК╔╪ Л≈╟Л├█Л═│Л²╢Л╖─ Л∙┼Л²─ physical memoryЛ≈░ mapping</p>

<ul>
  <li>paging modelЛ²└ Л┌╛Л ╘М∙≤К┼■ Л²╢Л°═
    <ul>
      <li>memory К┌╜К╧└К╔╪ Л≈├Л∙═Й╦╟ Л°└М∙╢</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="М■└К║°Л└╦Л┼╓-Л²╢К╞╦Л╖─-Й╣╛Л║╟-Лё╪Л├▄ЙЁ╣Й╟└">М■└К║°Л└╦Л┼╓ Л²╢К╞╦Л╖─ Й╣╛Л║╟ (Лё╪Л├▄ЙЁ╣Й╟└)</h2>

<ul>
  <li>М■└К║°Л└╦Л┼╓ Й╣╛Л║╟
    <ul>
      <li>Л∙└К·≤К┼■ Л▀╓Л═°К║° М┐▒Л·╛К░° К┌╢Л ╘ Й╦╟Л╓─Л°╪К║° Й╥╦К╕╟ Й╥╦К╕╪Л²╢К▀╓.</li>
      <li>Л°└Л²≤ Й╥╦К╕╪Л²─ К╛╪К╕╛Л═│Л²╦ size(Л ╘К÷┴)Л²└ Й╦╟Л╓─Л°╪К║° Й╥╦К╕╟ Й╥╦К╕╪Л²╢К▀╓.</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/168198905-d71739aa-fccf-4f5d-8986-aae32c569db3.png" alt="image" /></p>

<ul>
  <li>Л╫■К⌠° Л└╦Й╥╦К╗╪М┼╦(code segment)
    <ul>
      <li>Л╫■К⌠°К╔╪ К╡┬Л≈╜М∙° Й╦╟ЙЁ└Л√╢ К╙┘К═╧Л√╢</li>
    </ul>
  </li>
  <li>К█╟Л²╢М└╟ Л└╦Й╥╦К╗╪М┼╦(data segment)
    <ul>
      <li>e.g. int maxcount = 99; (initialized)</li>
      <li>e.g. long sum[1000]; (uninitialized)</li>
    </ul>
  </li>
  <li>Л┼╓М┐²(stack)
    <ul>
      <li>Л╖─Л≈╜ КЁ─Л┬≤, К╖╓Й╟° КЁ─Л┬≤, К╟≤М≥≤ Лё╪Л├▄, К╟≤М≥≤ Й╟▓, К⌠╠</li>
    </ul>
  </li>
  <li>М·≥(heap)
    <ul>
      <li>К▐≥Л═│ К╘■К╙╗К╕╛ М∙═К▀╧</li>
      <li>malloc() in C,</li>
      <li>new class() in Java</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="М■└К║°Л└╦Л┼╓-Л²╢К╞╦Л╖─-Л└╦Й╥╦К╗╪М┼╦">М■└К║°Л└╦Л┼╓ Л²╢К╞╦Л╖─ Л└╦Й╥╦К╗╪М┼╦</h2>

<ul>
  <li><strong>Text segment</strong> contains
    <ul>
      <li>
        <p>The program code, string literals, constant variables, and other read-only data.</p>
      </li>
      <li>
        <p>In Linux, this segment is marked read-only</p>
        <ul>
          <li>text segmentЛ²≤ К┌╢Л ╘Л²└ КЁ─Й╡╫М∙═ Л┬≤ Л≈├К▀╓.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Data segment</strong> contains
    <ul>
      <li>initialized global variables. (М∙╗Л┬≤ К╟√ Л└═Л√╦)</li>
      <li>Static variables (М∙╗Л┬≤ Л∙┬, К╟√ Л└═Л√╦)</li>
    </ul>
  </li>
  <li><strong>bss segment</strong> contains
    <ul>
      <li>uninitialized global variables.</li>
      <li>These variables contain special values (essentially, all <strong>zeros</strong>)</li>
    </ul>
  </li>
  <li><strong>Stack</strong> contains
    <ul>
      <li>the processБ─≥ execution stack (stack frame), which <strong>grows and shrinks</strong> dynamically as the stack depth increases and decreases.</li>
      <li>The execution stack contains local variables and function return data.</li>
    </ul>
  </li>
  <li><strong>Heap</strong> contains
    <ul>
      <li>a processБ─≥ dynamic memory.</li>
      <li>This segment is writable and can grow or shrink in size.</li>
      <li>This is the memory returned by malloc( )</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="varscЛ▀°М≈≤">vars.c(Л▀°М≈≤)</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
    
    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>
    <span class="n">fun</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">fun</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="p">...</span>
<span class="p">}</span> 
</code></pre></div></div>

<ul>
  <li>
    <p>a, bК┼■ М∙╗Л┬≤ К╟√Л≈░ Л└═Л√╦ К░≤Л≈┬Л°╪К╞─К║° global КЁ─Л┬≤Л²╢ЙЁ═, dК┼■ М∙╗Л┬≤ Л∙┬Л≈░Л└° Л└═Л√╦ К░≤Л≈┬Л╖─К╖▄ staticЛ°╪К║° Л└═Л√╦К░≤Л≈┬Й╦╟ К∙▄К╛╦Л≈░ a,b,dК┼■ data sectionЛ≈░ Л·░К╕╛К╔╪ Л·║К┼■К▀╓.</p>
  </li>
  <li>
    <p>cЛ≥─ pК┼■ Л╖─Л≈╜ КЁ─Л┬≤ Л²╢Й╦╟ К∙▄К╛╦Л≈░ stack sectionЛ≈░ Л═─Л·╔Л²╢ К░°К▀╓.</p>

    <ul>
      <li>
        <p>stackЛ≈░К┼■ Л²╢Л≥╦Л≈░К▐└ Л╖─Л≈╜ КЁ─Л┬≤, К╖╓Й╟°КЁ─Л┬≤, К╟≤М≥≤ Лё╪Л├▄, К╟≤М≥≤ Й╟▓ К⌠╓Л²╢ Л═─Л·╔К░°К▀╓.</p>
      </li>
      <li>
        <p>К▀╓К╔╦ М∙╗Л┬≤К╔╪ М≤╦Л╤°М√┬Л²└ К∙▄К┼■ stack frameЛ²╢ М∙≤К┌≤ М∙═К▀╧ К░≤Л√╢ Й╥╦ Л∙┬Л≈░ Й╥╦ М∙╗Л┬≤К╖▄Л²≤ Л╖─Л≈╜ КЁ─Л┬≤К⌠╓Л²╢ Л═─Л·╔К░°К▀╓.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>data sectionЛ²≤ КЁ─Л┬≤К⌠╓Л²─ М■└К║°Й╥╦К·╗Л²╢ Л╒┘Кё▄К░≤Л√╢К▐└ Л┌╛К²╪Л╖─Л╖─ Л∙┼К┼■К▀╓.</p>
  </li>
  <li>
    <p>stackЛ²≤ КЁ─Л┬≤К⌠╓Л²─ М∙╢К▀╧ М∙╗Л┬≤ К╕╛М└╢ Л▀° Л┌╛К²╪Л╖└К▀╓.</p>
  </li>
</ul>

<p><br /></p>

<h2 id="М■└К║°Й╥╦К·╗-Л▀°Л·▒М∙═-К∙▄-К╘■К╙╗К╕╛-Л≤│Л≈╜">М■└К║°Й╥╦К·╗ Л▀°Л·▒М∙═ К∙▄ К╘■К╙╗К╕╛ Л≤│Л≈╜</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/168521542-ffb1cb2b-464d-4445-8b1f-e6d2c7443237.png" alt="image" /></p>

<p>Л▀°Л·▒ Л═└Л²≤ К╙╗Л┼╣</p>

<p><br /></p>

<h2 id="main-М∙╗Л┬≤-Л▀╓М√┴М∙═-К∙▄-К╘■К╙╗К╕╛-Л≤│Л≈╜">main() М∙╗Л┬≤ Л▀╓М√┴М∙═ К∙▄ К╘■К╙╗К╕╛ Л≤│Л≈╜</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/168521575-a311dc3c-3ddc-40ae-8942-ea9fe148c828.png" alt="image" /></p>

<ul>
  <li>mallocЛ≈░ 40 К╟■Л²╢М┼╦ Л ■Й╣╛</li>
  <li>p, c Л╖─Л≈╜ КЁ─Л┬≤ Л└═Л√╦ К╟▐ Л╢┬Й╦╟М≥■</li>
</ul>

<p>local КЁ─Л┬≤ -&gt; stackЛ≈░ Л═─Л·╔</p>

<p><br /></p>

<h2 id="М∙╗Л┬≤-fun-Л▀╓М√┴М∙═-К∙▄-К╘■К╙╗К╕╛-Л≤│Л≈╜">М∙╗Л┬≤ fun() Л▀╓М√┴М∙═ К∙▄ К╘■К╙╗К╕╛ Л≤│Л≈╜</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/168521624-1f19b8c2-ee00-4dc4-b6ec-c9b1841181ce.png" alt="image" /></p>

<ul>
  <li>М∙╗Л┬≤Л≈░ К▄─М∙° stack frame</li>
  <li>К┘╦К·─Л┐┴ К╤─К╤└ fun М∙╗Л┬≤Л≈░ К▄─М∙° Л▀╓М√┴ stack
    <ul>
      <li>К╕╛М└╢Л²└ М∙≤К╘╢ funЛ≈░ К▄─М∙° Л▀╓М√┴ stack Л≈├Л√╢Л╖░</li>
    </ul>
  </li>
  <li>М■└К║°Й╥╦К·╗Л²╢ Л╒┘Кё▄М∙≤К╘╢ main()Л≈░ К▄─М∙° Л▀╓М√┴ stack Л≈├Л√╢Л╖░</li>
</ul>

<p><br /></p>

<h2 id="М∙╗Л┬≤-fun-Л▀╓М√┴Л²╢-Л╒┘Кё▄К░═-К∙▄-К╘■К╙╗К╕╛-Л≤│Л≈╜">М∙╗Л┬≤ fun() Л▀╓М√┴Л²╢ Л╒┘Кё▄К░═ К∙▄ К╘■К╙╗К╕╛ Л≤│Л≈╜</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/168521660-9d752ddd-18c4-4b49-9661-500581462c9f.png" alt="image" /></p>

<p><br /></p>

<h2 id="М∙═К▀╧-К╟╘К╡∙Л≈░-К■╟К╔╦-КЁ─Л┬≤К⌠╓Л²≤-К╤└К╔≤">М∙═К▀╧ К╟╘К╡∙Л≈░ К■╟К╔╦ КЁ─Л┬≤К⌠╓Л²≤ К╤└К╔≤</h2>

<p><img src="https://user-images.githubusercontent.com/79521972/168521688-93e2ca93-7336-4dcb-9d7b-95ffbd345308.png" alt="image" /></p>

<p>Л═∙Л═│ КЁ─Л┬≤: М∙╗Л┬≤ К╟√Л≈░Л└° Л└═Л√╦К░° КЁ─Л┬≤</p>

<p>Л·░К▐≥ КЁ─Л┬≤: Л·░К▐≥Л°╪К║° Л┌╛К²╪Л╖─ЙЁ═ Л┐²Й╦╟К┼■ КЁ─Л┬≤</p>

<p>К▐≥Л═│ КЁ─Л┬≤: К▐≥Л═│ М∙═К▀╧ К░≤Л√╢ heapЛ≈░ Л┐²Л└╠К░≤К┼■ КЁ─Л┬≤</p>

<p><br /></p>

<h2 id="stack-model-vs-heap-model">Stack model vs. Heap model</h2>

<ul>
  <li>
    <p>Modern programming languages employ two different memory models, namely the Stack and the Heap.</p>
  </li>
  <li>
    <p>We need to understand <strong>how calling procedures/functions/methods effects the memory model</strong>.</p>
  </li>
</ul>

<p><br /></p>

<h2 id="procedures">Procedures</h2>

<ul>
  <li>High level languages usually <strong>employ the concept of procedures</strong> (or functions, methods, routines, etc).</li>
  <li>A program is composed of several procedures. Each procedure is a small piece of code, which can receive arguments, define variables, perform a simple and defined operation and optionally return a value.</li>
  <li>Procedures may call other procedures(<strong>nested function</strong>) or themselves (<strong>recursion</strong>). Note that even object oriented programs are procedural.</li>
  <li>When you call a member method of some object, you basically call the method with the object as one of the arguments.</li>
</ul>

<p><br /></p>

<h2 id="the-call-stack">The Call Stack</h2>

<ul>
  <li>Procedural calls can be viewed in a <strong>stack-like manner</strong>; each procedureБ─≥s activation (function call) requires a dedicated frame on a stack.</li>
  <li>This function-call-dedicated stack frame is called an <strong>Activation Frame</strong>.
    <ul>
      <li>Each time a procedure is called, a new activation frame is generated on the stack.</li>
      <li>Each activation frame holds the following information:
        <ul>
          <li>The <strong>parameters</strong> passed to the procedure</li>
          <li><strong>Local primitive variables</strong> declared in the procedure</li>
          <li>The <strong>return address</strong> - Where to return to when the procedure ends</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>When an activation frame is created, the binding between local variables and <strong>their location on the stack</strong> is made. When a procedure terminates, its associated activation frame is <strong>popped</strong> from the stack, and discarded.</li>
  <li>In Java, only the variables located on the top-most activation frame may be accessed (parameters and local variables). However, this is not the case in C++.</li>
</ul>

<p><br /></p>

<h2 id="stack-implementation">Stack Implementation</h2>

<ul>
  <li>To realize the concept of procedures and activation frames, modern computer systems inherently support the <strong>call stack data structure</strong>;</li>
  <li>For each execution element (process, thread, etc. - Л▀╓М√┴ Лё╪Л╡╢К╖┬К▀╓) there exists an associated memory region which is called the call stack.</li>
  <li><strong>The operating system is responsible</strong> for allocating enough space for the stack of each process (or thread), and the process (or thread) implicitly, using a code generated by the compiler, manages the stack on its own.</li>
</ul>

<p><br /></p>

<h2 id="stack-advantages-and-disadvantages">Stack: Advantages and Disadvantages</h2>

<ul>
  <li><strong>Advantages</strong>
    <ul>
      <li><strong>call-stack</strong> memory model provides a <strong>fast managed memory</strong>
        <ul>
          <li>the memory used by the stack is automatically discarded when popping the stack frame just by changing the value of a single register.</li>
        </ul>
      </li>
      <li>In addition, the compiler is responsible of generating the instructions that manipulate the stack and therefore can optimize them.</li>
    </ul>
  </li>
  <li><strong>Disadvantages</strong>
    <ul>
      <li>
        <p>the stack is often limited in <strong>size</strong></p>
      </li>
      <li>
        <p>one cannot use values that resides inside a stack frame once it is popped (i.e., by one of the methods that correspond to the upper stack frames).</p>
      </li>
      <li>
        <p>the <strong>allocations</strong> must be <strong>static</strong> and the size allocated must be known at compile time, because the compiler generate the instructions that manipulate the stack at compile time.</p>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h1 id="102-К▐≥Л═│-М∙═К▀╧">10.2 К▐≥Л═│ М∙═К▀╧</h1>

<h2 id="К▐≥Л═│-К╘■К╙╗К╕╛-М∙═К▀╧">К▐≥Л═│ К╘■К╙╗К╕╛ М∙═К▀╧</h2>

<ul>
  <li>К▐≥Л═│ М∙═К▀╧Л²└ Л┌╛Л ╘М∙≤К┼■ Л²╢Л°═
    <ul>
      <li>М∙└Л ■М∙═ К∙▄ М∙└Л ■М∙═ К╖▄М│╪К╖▄ К╘■К╙╗К╕╛К╔╪ Л ■Л╡╜М∙╢Л└° Л┌╛Л ╘М∙≤Л≈╛</li>
      <li>К╘■К╙╗К╕╛К╔╪ Л═┬Л∙╫М∙°К▀╓.</li>
      <li>ЙЁ═Л═∙ М∙═К▀╧Л²≤ Й╡╫Л ╟ М■└К║°Й╥╦К·╗ Л▀°Л·▒ Л═└Л≈░ К╘■К╙╗К╕╛К╔╪ М∙═К▀╧М∙╢Л∙╪ М∙°К▀╓.</li>
      <li>К╘■К╙╗К╕╛Й╟─ Л═│Й╡▄ Л┌╛Л ╘К░≤Л√╢К▐└ К╟≤К⌠°Л▀° Л╖─Л═∙К░° К╘■К╙╗К╕╛К╔╪ М∙═К▀╧М∙╢Л∙╪ М∙≤Й╦╟ К∙▄К╛╦Л≈░ К╧└М ╗Л°╗Л═│Л²╦ Й╡╫Л ╟ К▀╓К╟≤Л┌╛</li>
    </ul>
  </li>
  <li>malloc( )</li>
  <li>calloc( )</li>
  <li>realloc( )</li>
  <li>free( )</li>
</ul>

<p><br /></p>

<h2 id="dynamic-memory-allocation">Dynamic memory allocation</h2>

<ul>
  <li>Static memory allocation
    <ul>
      <li>Array</li>
      <li>Array requires exact element number. (К╟╟Л≈╢Л²≤ element Й╟°Л┬≤)</li>
      <li>In some cases, we could not predict the amount of required memory in compilation time.</li>
    </ul>
  </li>
  <li>Functions for dynamic memory allocation
    <ul>
      <li>malloc : allocate memory space</li>
      <li>calloc : allocate memory space and initialize it to zero</li>
      <li>free : frees previously allocated memory space</li>
      <li>realloc : modifies the size of previously allocated space</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="К╘■К╙╗К╕╛-М∙═К▀╧">К╘■К╙╗К╕╛ М∙═К▀╧</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="kt">void</span> <span class="o">*</span><span class="nf">malloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">);</span>
<span class="c1">//size К╟■Л²╢М┼╦К╖▄М│╪Л²≤ К╘■К╙╗К╕╛ ЙЁ╣Й╟└Л²└ М∙═К▀╧М∙≤К╘╟ Й╥╦ Л▀°Л·▒Лё╪Л├▄К╔╪ void* М≤∙Л°╪К║° К╟≤М≥≤М∙°К▀╓.</span>
<span class="kt">void</span> <span class="nf">free</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
<span class="c1">//М▐╛Л²╦М└╟ pЙ╟─ Й╟─К╕╛М┌╓К┼■ К╘■К╙╗К╕╛ ЙЁ╣Й╟└Л²└ М∙╢Л═°М∙°К▀╓.</span>
</code></pre></div></div>

<ul>
  <li>return typeЛ²╢ void* Л²╦К█╟ Л²╢К┼■ Л√╢К√╓ М┐─Л·┘Л²╢ К╕╛М└╢ К░≤К█■К²╪К▐└ Л┐│Й╢─ Л≈├К▀╓К┼■ К╖░</li>
  <li>М·≥Л≈░ К▐≥Л═│ К╘■К╙╗К╕╛ М∙═К▀╧</li>
  <li>К²╪Л²╢К╦▄К÷╛К╕╛Й╟─ К╘■К╙╗К╕╛ М▓─Л²└ Й╢─К╕╛М∙°К▀╓</li>
  <li>malloc() М∙╗Л┬≤К┼■ К╘■К╙╗К╕╛К╔╪ М∙═К▀╧М∙═ К∙▄ Л┌╛Л ╘М∙≤ЙЁ═ free()К┼■ М∙═К▀╧ М∙° К╘■К╙╗К╕╛К╔╪ М∙╢Л═°М∙═ К∙▄ Л┌╛Л ╘М∙°К▀╓.</li>
</ul>

<p><br /></p>

<h2 id="К╘■К╙╗К╕╛-М∙═К▀╧-Л≤┬">К╘■К╙╗К╕╛ М∙═К▀╧ Л≤┬</h2>

<ul>
  <li>char *ptr;</li>
  <li>ptr = (char *) malloc(40); // Л╒▄КЁ─Л²─ char * М≤∙, Л ╟КЁ─Л²─ void * М≤∙Л²╢Л√╢Л└° 
                                             // М≤∙КЁ─М≥≤ М∙└Л ■</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/168522226-28804a8d-6e73-40ae-b3dc-9c03dfaf03a0.png" alt="image" /></p>

<ul>
  <li>int *ptr;</li>
  <li>ptr = (int *) malloc(10 * sizeof(int));</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/168522259-68362e36-9b52-4ad8-92f7-cf9d0474f35b.png" alt="image" /></p>

<p><br /></p>

<h2 id="Й╣╛Л║╟Л╡╢К╔╪-Л°└М∙°-К╘■К╙╗К╕╛-М∙═К▀╧-Л≤┬">Й╣╛Л║╟Л╡╢К╔╪ Л°└М∙° К╘■К╙╗К╕╛ М∙═К▀╧ Л≤┬</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">student</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
<span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span><span class="p">));</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/79521972/168522309-00533f00-896d-4b55-8e95-5fbd5f3f50f3.png" alt="image" /></p>

<p><br /></p>

<h2 id="Й╣╛Л║╟Л╡╢-К╟╟Л≈╢Л²└-Л°└М∙°-К╘■К╙╗К╕╛-М∙═К▀╧-Л≤┬">Й╣╛Л║╟Л╡╢ К╟╟Л≈╢Л²└ Л°└М∙° К╘■К╙╗К╕╛ М∙═К▀╧ Л≤┬</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
<span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="nf">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span><span class="p">));</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/79521972/168522350-72945a3b-aa0f-4bc2-9095-65de84425567.png" alt="image" /></p>

<p>*(ptr+i) or ptr[i] : (i+1)К╡┬Л╖╦ Й╣╛Л║╟Л╡╢</p>

<p><br /></p>

<h2 id="stud1c">stud1.c</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="k">struct</span> <span class="n">student</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
<span class="p">};</span>
<span class="cm">/* Л·┘К═╔К╟⌡Л²└ М∙≥Л┐² Л┬≤К╔╪ К╞╦К╕╛ Л·┘К═╔К╟⌡ЙЁ═ Л²╢Л√╢Л└° М∙≥Л┐² Л═∙КЁ╢К╔╪ Л·┘К═╔К╟⌡Л²─ М⌡└, Л²╢К⌠╓ М∙≥Л┐² Л═∙КЁ╢К╔╪ Л≈╜Л┬°Л°╪К║° Л╤°К═╔М∙≤К┼■ М■└К║°Й╥╦К·╗ */</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span> <span class="c1">// К▐≥Л═│ М∙═К▀╧К░° К╦■К║²Л²└ Й╟─К╕╛М┌╛ М▐╛Л²╦М└╟</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"К╙┤ К╙┘Л²≤ М∙≥Л┐²Л²└ Л·┘К═╔М∙≤Й╡═Л┼╣К▀┬Й╧▄? "</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Л≤╓К╔≤: М∙≥Л┐² Л┬≤К╔╪ Л·≤К╙╩ Л·┘К═╔М√┬Л┼╣К▀┬К▀╓.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"М■└К║°Й╥╦К·╗Л²└ Л╒┘Кё▄М∙╘К▀┬К▀╓.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ptr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"malloc"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d К╙┘Л²≤ М∙≥К╡┬ЙЁ╪ Л²╢К╕└Л²└ Л·┘К═╔М∙≤Л└╦Л ■.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">id</span><span class="p">,</span> <span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">* М∙≥Л┐² Л═∙КЁ╢(Л≈╜Л┬°) *</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%d %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">id</span><span class="p">,</span> <span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>stud1
К╙┤ К╙┘Л²≤ М∙≥Л┐²Л²└ Л·┘К═╔М∙≤Й╡═Л┼╣К▀┬Й╧▄? 5
5 К╙┘Л²≤ М∙≥К╡┬ЙЁ╪ Л²╢К╕└Л²└ Л·┘К═╔М∙≤Л└╦Л ■.
1401001 К╟∙Л≈╟Л∙└
1401003 Й╧─М┐°М≥≤
1401006 Й╧─М≤└Л╖└
1401009 Л·╔Л┐⌡КЁ└
1401011 М≥█Й╦╦К▐≥
^D
<span class="k">*</span> М∙≥Л┐² Л═∙КЁ╢<span class="o">(</span>Л≈╜Л┬°<span class="o">)</span> <span class="k">*</span>
1401011 М≥█Й╦╦К▐≥
1401009 Л·╔Л┐⌡КЁ└
1401006 Й╧─М≤└Л╖└
1401003 Й╧─М┐°М≥≤
1401001 К╟∙Л≈╟Л∙└
</code></pre></div></div>

<p><br /></p>

<h2 id="example-of-memory-allocation">Example of memory allocation</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span> <span class="cp">#include</span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">;</span>
    <span class="cm">/*Allocating memory*/</span>
    <span class="k">if</span><span class="p">((</span><span class="n">buffer</span><span class="o">=</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="mi">20</span><span class="p">))</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Malloc failed</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">"Kwangwoon Univ."</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
    <span class="cm">/*freeing memory*/</span>
    <span class="n">free</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span> <span class="c1">// size of char * 20 Л²╢  free</span>
<span class="p">}</span> 
</code></pre></div></div>

<p><br /></p>

<h2 id="К╟╟Л≈╢-М∙═К▀╧">К╟╟Л≈╢ М∙═К▀╧</h2>

<ul>
  <li>Й╟≥Л²─ М│╛Й╦╟Л²≤ К╘■К╙╗К╕╛К╔╪ Л≈╛К÷╛ Й╟°К╔╪ М∙═К▀╧М∙° Й╡╫Л ╟</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="kt">void</span> <span class="o">*</span><span class="nf">calloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">n</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">);</span>
<span class="c1">// М│╛Й╦╟Й╟─ sizeЛ²╦ К╘■К╙╗К╕╛ ЙЁ╣Й╟└Л²└ nЙ╟° М∙═К▀╧М∙°К▀╓. Й╟▓Л²└ К╙╗К▒░ 0Л°╪К║° Л╢┬Й╦╟М≥■М∙°К▀╓. Л▀╓М▄╗М∙≤К╘╢ NULLК╔╪ К╟≤М≥≤М∙°К▀╓.</span>
</code></pre></div></div>

<ul>
  <li>Л²╢К╞╦ М∙═К▀╧К░° К╘■К╙╗К╕╛ М│╛Й╦╟ КЁ─Й╡╫</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="kt">void</span> <span class="o">*</span><span class="nf">realloc</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">newsize</span><span class="p">);</span>
<span class="c1">//ptrЛ²╢ Й╟─К╕╛М┌╓К┼■ Л²╢К╞╦ М∙═К▀╧К░° К╘■К╙╗К╕╛Л²≤ М│╛Й╦╟К╔╪ newsizeК║° КЁ─Й╡╫М∙°К▀╓.</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="calloc-Л≤┬">calloc() Л≤┬</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span><span class="o">*</span><span class="n">q</span><span class="p">;</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">10</span><span class="o">*</span><span class="nf">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
<span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
	<span class="n">perror</span><span class="p">(</span><span class="err">Б─°</span><span class="n">malloc</span><span class="err">Б─²</span><span class="p">);</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
<span class="k">if</span> <span class="p">(</span><span class="n">q</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
	<span class="n">perror</span><span class="p">(</span><span class="err">Б─°</span><span class="n">calloc</span><span class="err">Б─²</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="Л┼╓М┐²Л≈░-К╘■К╙╗К╕╛-М∙═К▀╧">Л┼╓М┐²Л≈░ К╘■К╙╗К╕╛ М∙═К▀╧</h2>

<ul>
  <li>#include</li>
  <li>Void * alloca( size_t size);</li>
  <li>Life cycle?</li>
</ul>

<p>stack frameЛ≈░Л└° Л┐²Л└╠К░° К╙╗К⌠═ КЁ─Л┬≤К┼■ stack frameЛ²╢ Л┌╛К²╪Л╖─К╘╢Л└° Й╟≥Л²╢ К╙╗К▒░ Л┌╛К²╪Л╖─Й╡▄ К░°К▀╓.</p>

<p><br /></p>

<h2 id="dynamic-vs-static">Dynamic vs. Static</h2>

<ul>
  <li>Dynamic
    <ul>
      <li>More efficient memory usage</li>
      <li>Slower execution time (Л╩╓К└░Л≈░Й╡▄ К╙┤К╟■Л²╢М┼╦К╔╪ Л╖─Й╦┬ К▀╧Л·╔ М∙═К▀╧М∙╢ К▀╛К²╪ЙЁ═ Л ■Л╡╜)</li>
      <li>Less reliable compared to static mechanism</li>
      <li>Realization : malloc( ), free( )</li>
    </ul>
  </li>
  <li>Static
    <ul>
      <li>Inefficient in memory usage</li>
      <li><strong>Faster</strong></li>
      <li><strong>Reliable</strong> because all required memory spaces are <strong>reserved</strong> at compilation time</li>
      <li>Realization : declaring memory</li>
      <li>Л╩╢М▄▄Л²╪ Л═└Л≈░ М∙═К▀╧ - К╘■К╙╗К╕╛Й╟─ М≥∙КЁ╢ К░° Л┐│М≥╘Л≈░Л└° Л▀°Л·▒ К░╗</li>
    </ul>
  </li>
  <li>Real world : Dynamic + Static</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
    
    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>
    <span class="n">fun</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>a, bК┼■ Л╩╢М▄▄Л²╪ М∙═ К∙▄ М∙═К▀╧ К╟⌡К┼■ Л═∙Л═│ КЁ─Л┬≤Л²╢К▀╓.</p>

<p>pК┼■ Л╩╢М▄▄Л²╪ М∙═ К∙▄Й╟─ Л∙└К▀┬К²╪ Л▀╓Л═° Л²╢ М■└К║°Л└╦Л┼╓ Л▀╓М√┴К░═ К∙▄ Й╡╟Л═∙К░≤Й╦╟ К∙▄К╛╦Л≈░ К▐≥Л═│ М∙═К▀╧Л²╢К▀╓.</p>

<p><br /></p>

<h2 id="heap">Heap</h2>

<ul>
  <li>Sometimes, programs need to store information which is relevant across function calls, too big to fit on the stack, or of size that is unknown at compile time.
    <ul>
      <li>М∙╗Л┬≤ М≤╦Л╤°Л≈░ Й╢─К═╗К░° Л═∙КЁ╢ Л═─Л·╔, Л┼╓М┐²Л≈░ К╖·Л╤■Й╦╟Л≈░К┼■ К└┬К╛╢ М│╟ К█╟Л²╢М└╟, Л╩╢М▄▄Л²╪ К▀╧Л▀° Л∙▄ Л┬≤ Л≈├К┼■ М│╛Й╦╟Л²≤ Л═∙КЁ╢ Л═─Л·╔ -&gt; Л²╢ Й╡╫Л ╟Л≈░ heap</li>
      <li>stackЙЁ╪Л²≤ Л╟╗Л²╢Л═░: М∙╗Л┬≤Й╟─ Л╒┘Кё▄К░≤К█■К²╪К▐└ Л┌╢Л∙└Л·┬К▀╓.</li>
    </ul>
  </li>
  <li>We would like to be able to specify that we want a block of memory of a given size to store some information.</li>
  <li>We usually do not care where the memory comes from, we are just interested in getting a block of it for our use.</li>
  <li>As a result, we abstract this service as a heap, where blocks of memory are heaped in a pile, and we can get to the block we need if we remember where we left it.</li>
</ul>

<p><br /></p>

<h2 id="heap-advantages-and-disadvantages">Heap: Advantages and Disadvantages</h2>

<ul>
  <li><strong>Advantages</strong>
    <ul>
      <li>The Heap model allows for dynamic memory allocation
        <ul>
          <li>i.e., the size of the allocation does not have to be known at compile time.</li>
        </ul>
      </li>
      <li>memory on the heap <strong>stays on the heap until it is explicitly freed</strong> (either by the user or by the garbage collector),</li>
      <li>the heap is much larger than the stack and consists from most of the memory available to the process (the virtual memory).</li>
    </ul>
  </li>
  <li><strong>Disadvantages</strong>
    <ul>
      <li>heap allocation <strong>costs</strong> more than stack allocation (as the runtime must find an empty memory location to allocate on the fly) and can cause <strong>memory</strong> <strong>fragmentation</strong>.
        <ul>
          <li>М∙≤К⌠°К■■Л┼╓М│╛К┌≤ К╘■К╙╗К╕╛Л≈░Л└° К█╟Л²╢М└╟Й╟─ Л═─Л·╔К░≤Л≈┬К▀╓Й╟─ К╧╪Л║▄Л²└ К∙▄ К┌╗К┼■ Л┌╛Л ╘К░≤Л╖─ Л∙┼К┼■ ЙЁ╣Й╟└</li>
        </ul>
      </li>
      <li>If the user is responsible to free the allocated memory by hand
        <ul>
          <li>the program may be pruned to memory leaks and access to non-allocated memory.</li>
        </ul>
      </li>
      <li>If the runtime is responsible to free the allocated memory (i.e., using automatic garbage collection)
        <ul>
          <li>the performance of the program may degrade as CPU time will be dedicated for the garbage collection execution and also since most garbage collection algorithms require to stop all or some parts of the program while they perform the cleaning.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h1 id="103-Л≈╟Й╡╟-К╕╛Л┼╓М┼╦">10.3 Л≈╟Й╡╟ К╕╛Л┼╓М┼╦</h1>

<h2 id="Л≈╟Й╡╟-К╕╛Л┼╓М┼╦Л²≤-М∙└Л ■Л└╠">Л≈╟Й╡╟ К╕╛Л┼╓М┼╦Л²≤ М∙└Л ■Л└╠</h2>

<ul>
  <li>Л≤┬: Л≈╛К÷╛ М∙≥Л┐²К⌠╓Л²≤ К█╟Л²╢М└╟К╔╪ Л═─Л·╔М∙╢Л∙╪ М∙°К▀╓ЙЁ═ Л┐²Й╟│М∙╢КЁ╢Л·░.
    <ul>
      <li>Й╟─Л·╔ Й╟└К▀╗М∙° К╟╘К╡∙Л²─ Й╣╛Л║╟Л╡╢ К╟╟Л≈╢Л²└ Л└═Л√╦М∙≤Л≈╛ Л┌╛Л ╘М∙≤К┼■ Й╡┐Л²╢К▀╓.</li>
      <li>Л²╢ К╟╘К╡∙Л²─ К╟╟Л≈╢Л²≤ М│╛Й╦╟К╔╪ К╞╦К╕╛ Й╡╟Л═∙М∙╢Л∙╪ М∙≤К┼■ К╛╦Л═°Л═░Л²╢ Л·┬К▀╓.</li>
      <li>К╟╟Л≈╢Л²≤ М│╛Й╦╟КЁ╢К▀╓ К╖▌Л²─ М∙≥Л┐²К⌠╓Л²─ Л╡≤К╕╛М∙═ Л┬≤ Л≈├Л°╪К╘╟ Л²╢КЁ╢К▀╓ Л═│Л²─ М∙≥ Л┐²К⌠╓Л²≤ Й╡╫Л ╟Л≈░К┼■ К╟╟Л≈╢Л²≤ Й╦╟Л√╣ ЙЁ╣Й╟└Л²─ К┌╜К╧└К░°К▀╓.</li>
    </ul>
  </li>
  <li>Л≈╟Й╡╟ К╕╛Л┼╓М┼╦(linked list)К╔╪ Л┌╛Л ╘М∙≤Л≈╛ М∙╢Й╡╟М∙═ Л┬≤ Л·┬К▀╓.
    <ul>
      <li>data field + pointer field</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/79521972/168522865-330a6668-dcea-44b7-881a-764a1810a124.png" alt="image" /></p>

<p><br /></p>

<h2 id="Л·░Й╦╟-Л╟╦Л║╟-Й╣╛Л║╟Л╡╢К╔╪-Л°└М∙°-К╘■К╙╗К╕╛-М∙═К▀╧">Л·░Й╦╟ Л╟╦Л║╟ Й╣╛Л║╟Л╡╢К╔╪ Л°└М∙° К╘■К╙╗К╕╛ М∙═К▀╧</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">student</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
    <span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
<span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span><span class="p">));</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/79521972/168522900-58b26e4d-0f88-404f-9797-033aaa215c54.png" alt="image" /></p>

<p><br /></p>

<h2 id="stud2c">stud2.c</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="err">Б─╕</span>
<span class="cm">/* М∙≥Л┐² Л═∙КЁ╢К╔╪ Л·┘К═╔К╟⌡Л∙└ Л≈╟Й╡╟ К╕╛Л┼╓М┼╦Л≈░ Л═─Л·╔М∙≤ЙЁ═ М∙≥Л┐² Л═∙КЁ╢К╔╪ Л≈╜Л┬°Л°╪К║° Л╤°К═╔М∙°К▀╓. */</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">id</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
    <span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"М∙≥К╡┬ЙЁ╪ Л²╢К╕└Л²└ Л·┘К═╔М∙≤Л└╦Л ■</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    
    <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">"%d %s"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">id</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//М∙° М∙≥Л┐² Л═∙КЁ╢ Л·┘К═╔</span>
        <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span><span class="p">));</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">perror</span><span class="p">(</span><span class="s">"malloc"</span><span class="p">);</span>
            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">p</span><span class="o">-&gt;</span><span class="n">id</span> <span class="o">=</span> <span class="n">id</span><span class="p">;</span>
        <span class="n">strcpy</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span><span class="n">name</span><span class="p">);</span>
        <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
        <span class="n">head</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">* М∙≥Л┐² Л═∙КЁ╢(Л≈╜Л┬°) *</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
    
    <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">count</span><span class="o">++</span><span class="p">;</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"М∙≥К╡┬: %d Л²╢К╕└: %s </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">printf</span><span class="p">(</span><span class="s">"Л╢² %d К╙┘Л·┘К▀┬К▀╓.</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>stud2
М∙≥К╡┬ЙЁ╪ Л²╢К╕└Л²└ Л·┘К═╔М∙≤Л└╦Л ■.
1401001 К╟∙Л≈╟Л∙└
1401003 Й╧─М┐°М≥≤
1401006 Й╧─М≤└Л╖└
1401009 Л·╔Л┐⌡КЁ└
1401011 М≥█Й╦╦К▐≥
^D
<span class="k">*</span> М∙≥Л┐² Л═∙КЁ╢<span class="o">(</span>Л≈╜Л┬°<span class="o">)</span> <span class="k">*</span>
1401011 М≥█Й╦╦К▐≥
1401009 Л·╔Л┐⌡КЁ└
1401006 Й╧─М≤└Л╖└
1401003 Й╧─М┐°М≥≤
1401001 К╟∙Л≈╟Л∙└
</code></pre></div></div>

<p><br /></p>

<h2 id="М│░-М≤∙М┐°Л²≤-Л≈╟Й╡╟-К╕╛Л┼╓М┼╦">М│░ М≤∙М┐°Л²≤ Л≈╟Й╡╟ К╕╛Л┼╓М┼╦</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span><span class="p">));</span>
<span class="p">...</span>
<span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span> <span class="c1">// М│░Л²≤ К│²Л≈░ Л≈╟Й╡╟</span>
<span class="n">tail</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span> <span class="c1">// М│░Л²≤ К│²Л²└ Й╟─К╕╛М┌╢</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/79521972/168523025-a5a6e129-54ba-4f4b-a39d-751e7ebad78d.png" alt="image" /></p>

<p><br /></p>

<h1 id="104-К╘■К╙╗К╕╛-Й╢─К╕╛-М∙╗Л┬≤">10.4 К╘■К╙╗К╕╛ Й╢─К╕╛ М∙╗Л┬≤</h1>

<h2 id="К╛╦Л·░Л≈╢-Л╡≤К╕╛-М∙╗Л┬≤Л≥─Л²≤-Л╟╗Л²╢Л═░">К╛╦Л·░Л≈╢ Л╡≤К╕╛ М∙╗Л┬≤Л≥─Л²≤ Л╟╗Л²╢Л═░</h2>

<ul>
  <li>strcpy() or strncpy() <strong>vs</strong> memcpy, strcmp() vs memcmp()</li>
  <li>Й╦╟КЁ╦Л═│ К▐≥Л·▒Л²─ К▐≥Л²╪М∙╗</li>
  <li>Л╟╗Л²╢Л═░
    <ul>
      <li>Л²╦Л·░Л≥─ К╟≤М≥≤ Й╟▓Л²╢ К▀╓К╕└
        <ul>
          <li><strong>К╛╦Л·░Л≈╢ Л╡≤К╕╛М∙╗Л┬≤</strong>
            <ul>
              <li>К╛╦Л·░Л≈╢Л²└ К▄─Л┐│Л°╪К║° М∙≤К╞─К║° Л²╦Л·░Л≥─ К╟≤М≥≤ Й╟▓Л²╢ char * М≤∙</li>
            </ul>
          </li>
          <li><strong>К╘■К╙╗К╕╛ Й╢─К╕╛ М∙╗Л┬≤</strong>
            <ul>
              <li>Л·└Л²≤Л²≤ Й╟▓Л²└ Й╟√К┼■ К╘■К╙╗К╕╛ Л≤│Л≈╜Л²└ К▄─Л┐│Л°╪К║° М∙≤К╞─К║° Л²╦Л·░Л≥─ К╟≤М≥≤ Й╟▓Л²╢ void * М≤∙ К╘■К╙╗К╕╛Л≈░ Л═─Л·╔К░° Й╟▓Л²≤ М┐─Л·┘Л≈░ К╛╢Й╢─М∙╗</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Й╦╦Л²╢ Л═∙КЁ╢
        <ul>
          <li>К╛╦Л·░Л≈╢ Л╡≤К╕╛М∙╗Л┬≤
            <ul>
              <li>К╛╦Л·░Л≈╢Л²─ Л▀°Л·▒ Лё╪Л├▄К╔╪ Л∙▄К═╓Лё╪К╘╢ NULL К╛╦Л·░К╔╪ К╛╦Л·░Л≈╢Л²≤ К│²Л°╪К║° Л²╦Л╖─М∙≤К╞─К║° Й╦╦Л²╢К╔╪ Л∙▄К═╓Лё╪Л╖─ Л∙┼Л²▄.</li>
            </ul>
          </li>
          <li>К╘■К╙╗К╕╛ Й╢─К╕╛ М∙╗Л┬≤
            <ul>
              <li>Л┼╓М┼╦К╖│ К▀╗Л°└К║° Л╡≤К╕╛М∙≤Л╖─ Л∙┼Л°╪К╞─К║° Й╦╦Л²╢К╔╪ Л∙▄К═╓ Лё╪Л√╢Л∙╪ М∙╗</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="К╘■К╙╗К╕╛-Й╢─К╕╛-М∙╗Л┬≤">К╘■К╙╗К╕╛ Й╢─К╕╛ М∙╗Л┬≤</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># include &lt;string.h&gt;
</span><span class="kt">void</span> <span class="o">*</span><span class="nf">memset</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">);</span>
<span class="c1">//sЛ≈░Л└° Л▀°Л·▒М∙≤Л≈╛ n К╟■Л²╢М┼╦К╖▄М│╪ К╟■Л²╢М┼╦ cК║° Л└╓Л═∙М∙° К▀╓Л²▄Л≈░ sК╔╪ К╟≤М≥≤М∙°К▀╓.</span>
<span class="kt">int</span> <span class="nf">memcmp</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">s2</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">);</span>
<span class="c1">//s1ЙЁ╪ s2Л≈░Л└° Л╡╚ n К╟■Л²╢М┼╦К╔╪ К╧└Й╣░М∙╢Л└°, К╘■К╙╗К╕╛ К╦■К║² К┌╢Л ╘Л²╢ К▐≥Л²╪М∙≤К╘╢ 0Л²└ К╟≤М≥≤М∙≤ЙЁ═ s1Л²╢</span>
<span class="c1">//s2КЁ╢К▀╓ Л·▒Л°╪К╘╢ Л²▄Л┬≤К╔╪ К╟≤М≥≤М∙≤ЙЁ═, s1Л²╢ s2КЁ╢К▀╓ М│╛К▀╓К╘╢ Л√▒Л┬≤К╔╪ К╟≤М≥≤М∙°К▀╓.</span>
<span class="kt">void</span> <span class="o">*</span><span class="nf">memchr</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">);</span>
<span class="c1">//sЙ╟─ Й╟─К╕╛М┌╓К┼■ К╘■К╙╗К╕╛Л²≤ n К╟■Л²╢М┼╦ К╡■Л°└Л≈░Л└° К╛╦Л·░ cК╔╪ М┐░Л┐┴М∙°К▀╓. cЛ≥─ Л²╪Л╧≤М∙≤К┼■ Л╡╚ К╟■Л²╢М┼╦Л≈░</span>
<span class="c1">//К▄─М∙° М▐╛Л²╦М└╟К╔╪ К╟≤М≥≤М∙≤Й╠╟К┌≤,cК╔╪ Л╟╬Л╖─ К╙╩М∙≤К╘╢ NULLЛ²└ К╟≤М≥≤М∙°К▀╓.</span>
<span class="kt">void</span> <span class="o">*</span><span class="nf">memmove</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">);</span>
<span class="c1">//srcЛ≈░Л└° dstК║° n К╟■Л²╢М┼╦К╔╪ КЁ╣Л┌╛М∙≤ЙЁ═, dstК╔╪ К╟≤М≥≤М∙°К▀╓.</span>
<span class="kt">void</span> <span class="o">*</span><span class="nf">memcpy</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">);</span>
<span class="c1">//srcЛ≈░Л└° dstК║° n К╟■Л²╢М┼╦К╔╪ КЁ╣Л┌╛М∙°К▀╓. К▒░ К╘■К╙╗К╕╛ Л≤│Л≈╜Л²─ Й╡╧ЛЁ░Л╖─Л╖─ Л∙┼К┼■К▀╓. К╖▄Л²╪ К╘■К╙╗К╕╛ Л≤│</span>
<span class="c1">//Л≈╜Л²└ Й╡╧ЛЁ░Л└° Л⌠╟Й╦╦ Л⌡░М∙ К▀╓К╘╢ memmove() М∙╗Л┬≤К╔╪ Л┌╛Л ╘М∙╢К²╪. dstК╔╪ К╟≤М≥≤М∙°К▀╓.</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="memc">mem.c</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="o">=</span><span class="s">"Do you like Linux?"</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span><span class="o">*</span><span class="n">p</span><span class="p">;</span>
    
    <span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">));</span>
    <span class="n">puts</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">ptr</span><span class="o">+</span><span class="mi">12</span><span class="p">,</span><span class="sc">'l'</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> 
    <span class="n">puts</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span> 

    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">memchr</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span><span class="sc">'l'</span><span class="p">,</span><span class="mi">18</span><span class="p">);</span> 
    <span class="n">puts</span><span class="p">(</span><span class="n">p</span><span class="p">);</span> 
    <span class="n">memmove</span><span class="p">(</span><span class="n">str</span><span class="o">+</span><span class="mi">12</span><span class="p">,</span><span class="n">str</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>mem
Do you like Linux?
Do you like Linux?
like Linux?
Do you like Linux
</code></pre></div></div>

:ET